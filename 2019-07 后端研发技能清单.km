{"root":{"data":{"id":"bvdrsx1w8o00","created":1562578369456,"text":"2019-07 后端研发技能清单"},"children":[{"data":{"id":"bvdru4z169k0","created":1562578465061,"text":"数据结构与常用算法","layout":null},"children":[{"data":{"id":"byjr3tly40o0","created":1574154237917,"text":"数组"},"children":[{"data":{"id":"byuq1jb8ckg0","created":1575268397186,"text":"随机访问特性、大小固定、下标0表示offset、插入删除元素会移动元素（如果无序，可考虑插入位置元素与尾部交换）、比Java容器高效、"},"children":[]},{"data":{"id":"byvg3216nmw0","created":1575341865160,"text":"固定数组、动态数组"},"children":[]},{"data":{"id":"byvkxbqbdz40","created":1575355521635,"text":"多维数组"},"children":[{"data":{"id":"byvkxf98sdk0","created":1575355529310,"text":"Java中，二维数组实际上是包含着 M 个元素的一维数组，每个元素都是包含有 N 个整数的数组。"},"children":[]}]}]},{"data":{"id":"byjr3wst7hs0","created":1574154244862,"text":"链表"},"children":[{"data":{"id":"byjr3zezf000","created":1574154250557,"text":"单链表"},"children":[{"data":{"id":"byuq8s195mo0","created":1575268964723,"text":"动态扩容"},"children":[]}]},{"data":{"id":"byjr41ime7c0","created":1574154255130,"text":"双向链表"},"children":[{"data":{"id":"byuq79uod2g0","created":1575268846779,"text":"优点是从链尾到链头⽐较⽅便"},"children":[]}]},{"data":{"id":"byjr43pcru80","created":1574154259891,"text":"循环链表"},"children":[]}]},{"data":{"id":"byjr47sn1sw0","created":1574154268797,"text":"栈"},"children":[{"data":{"id":"bz8et9qwso80","created":1576658556638,"text":"DFS深度优先搜索模板"},"children":[]}]},{"data":{"id":"byjr4covazs0","created":1574154279453,"text":"队列"},"children":[{"data":{"id":"byuqfwlr1io0","created":1575269523219,"text":"顺序队列、链式队列"},"children":[]},{"data":{"id":"byuqg11anew0","created":1575269532866,"text":"循环队列"},"children":[{"data":{"id":"byuqg3gxab40","created":1575269538165,"text":"队空时tail==head、队满时(tail+1)%length==head 有一个空格"},"children":[]}]},{"data":{"id":"bz8bnxzq0uw0","created":1576649675899,"text":"BFS广度优先搜索模板"},"children":[]}]},{"data":{"id":"byjr4fvg9fs0","created":1574154286381,"text":"树"},"children":[{"data":{"id":"byjr4li5yk00","created":1574154298638,"text":"二叉树、完全二叉树、满二叉树、红黑树"},"children":[{"data":{"id":"byur3gze3io0","created":1575271369955,"text":"二叉树数组实现：根节点在下标i=1的位置，左子节点为2*i，右节点在2*i+1"},"children":[]},{"data":{"id":"byur6fh36ds0","created":1575271601764,"text":"二叉查找树：其左⼦树中的每个节点的值，都要⼩于这个节点的值，⽽右⼦树节点的值都⼤于这个节点的值"},"children":[]}]},{"data":{"id":"byjr4vn4x740","created":1574154320707,"text":"B树、Trie树、AC自动机"},"children":[]}]},{"data":{"id":"byjr5ij5nxs0","created":1574154370532,"text":"跳表（类似于链表实现的二分查找）"},"children":[]},{"data":{"id":"byjr5rlt1ls0","created":1574154390283,"text":"散列表"},"children":[{"data":{"id":"byuqvxk7yzk0","created":1575270779130,"text":"散列冲突：开放寻址法（线性探测、二次探测、双重散列）、链表法"},"children":[]}]},{"data":{"id":"byjr623tbds0","created":1574154413140,"text":"堆"},"children":[]},{"data":{"id":"byjr4iaq5hc0","created":1574154291658,"text":"图"},"children":[]},{"data":{"id":"bykcfqn8vog0","created":1574214415143,"text":"排序"},"children":[{"data":{"id":"bykcg3wliio0","created":1574214444007,"text":"冒泡、插入、选择排序"},"children":[]},{"data":{"id":"bykcg9zjxjk0","created":1574214457246,"text":"快排、归并、堆排序"},"children":[]}]},{"data":{"id":"bykchm5nedk0","created":1574214562100,"text":"查找"},"children":[{"data":{"id":"bykcho367io0","created":1574214566304,"text":"二分查找"},"children":[{"data":{"id":"byuqj2v8pr40","created":1575269771946,"text":"依赖数组随机访问的特性，只能⽤数组来实现"},"children":[]}]}]}]},{"data":{"id":"bvdru99z0io0","created":1562578474430,"text":"设计模式与设计原则","layout":null},"children":[{"data":{"id":"bvg1ph9thg00","created":1562809431026,"text":"OO七大设计原则"},"children":[{"data":{"id":"bvg1pxkq66o0","created":1562809466514,"text":"单一职责原则SRP"},"children":[{"data":{"id":"bvh2bns2hv40","created":1562912729159,"text":"专注降低类的复杂度，实现类要职责单一"},"children":[]}]},{"data":{"id":"bvh2agz48ww0","created":1562912635995,"text":"开放关闭原则OCP"},"children":[{"data":{"id":"bvh2bgw0us00","created":1562912714160,"text":"所有面向对象原则的核心，设计要对扩展开发，对修改关闭"},"children":[]}]},{"data":{"id":"bvjldptr8pk0","created":1563169611344,"text":"依赖倒置原则DIP"},"children":[{"data":{"id":"bvjlf12wwww0","created":1563169714207,"text":"程序要依赖于抽象接口，不要依赖于具体实现。即面向接口编程","font-weight":"bold"},"children":[]}]},{"data":{"id":"bvkbytr2lpc0","created":1563244614394,"text":"迪米特法则LoD/最少知道原则LKP"},"children":[{"data":{"id":"bvkbzresg3s0","created":1563244687662,"text":"低耦合，降低系统的耦合度，使一个模块的修改尽量少的影响其他模块，即只与直接的朋友通信"},"children":[]}]},{"data":{"id":"bvpeix1wtls0","created":1563759630866,"text":"里氏替换原则LSP"},"children":[{"data":{"id":"bvpejazmsaw0","created":1563759661203,"text":"规范子类如何继承父类，最终目的就是保持父类的方法不被覆盖。定义：所有引用基类的地方必须能透明地使用其子类的对象。"},"children":[{"data":{"id":"bvpejl7f0co0","created":1563759683442,"text":"子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。"},"children":[]},{"data":{"id":"bvpekhhvk5c0","created":1563759753731,"text":"子类中可以增加自己特有的方法。"},"children":[]},{"data":{"id":"bvpekp370ls0","created":1563759770258,"text":"当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。"},"children":[]},{"data":{"id":"bvpekvyh3zc0","created":1563759785210,"text":"当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。"},"children":[]}]}]},{"data":{"id":"bvq9ieilsvc0","created":1563847044924,"text":"接口隔离原则ISP"},"children":[{"data":{"id":"bvq9ji7023c0","created":1563847131293,"text":"要求接口的方法尽量少，接口尽量细化"},"children":[]}]},{"data":{"id":"bvvdw3xe7u00","created":1564367203195,"text":"组合复用原则CARP"},"children":[{"data":{"id":"bvvdykfkqf40","created":1564367395851,"text":"在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新的对象通过向这些对象的委派达到复用已有功能的目的，即尽量使用（对象）组合，而非继承"},"children":[{"data":{"id":"bvvdziumaa80","created":1564367470771,"text":"例如：老师、学生、运动员的接口设计：https://blog.csdn.net/zhonghuan1992/article/details/38357425"},"children":[]}]}]}]},{"data":{"id":"c294akejv5k0","created":1587698915094,"text":"结构型模式，是针对软件设计结构的总结，关注于类、对象继承、组合方式的实践经验。常见的结构型模式，包括桥接模式（Bridge）、适配器模式（Adapter）、装饰者模式（Decorator）、代理模式（Proxy）、组合模式（Composite）、外观模式（Facade）、享元模式（Flyweight）等。"},"children":[]},{"data":{"id":"c294aa1qs6g0","created":1587698892551,"text":"创建型模式，是对对象创建过程的各种问题和解决方案的总结，包括各种工厂模式（Factory、Abstract Factory）、单例模式（Singleton）、构建器模式（Builder）、原型模式（ProtoType）。"},"children":[]},{"data":{"id":"c294auwfft40","created":1587698937942,"text":"行为型模式，是从类或对象之间交互、职责划分等角度总结的模式。比较常见的行为型模式有策略模式（Strategy）、解释器模式（Interpreter）、命令模式（Command）、观察者模式（Observer）、迭代器模式（Iterator）、模板方法模式（Template Method）、访问者模式（Visitor）。"},"children":[]},{"data":{"id":"bvg1pkwo2g80","created":1562809438938,"text":"设计模式详细","expandState":"expand"},"children":[{"data":{"id":"bvecy0yit0g0","created":1562638013088,"text":"模板方法模式"},"children":[]},{"data":{"id":"bvecy1zx8w80","created":1562638015349,"text":"门面模式"},"children":[]},{"data":{"id":"bvecy23wtg80","created":1562638015590,"text":"策略模式"},"children":[]},{"data":{"id":"bvecy26imc80","created":1562638015748,"text":"责任链模式"},"children":[]},{"data":{"id":"bvecy2a1k9c0","created":1562638015961,"text":"代理模式"},"children":[]},{"data":{"id":"bvecy2cshl40","created":1562638016127,"text":"适配器模式"},"children":[]},{"data":{"id":"bvecy2h5ceg0","created":1562638016391,"text":"原型模式"},"children":[]},{"data":{"id":"bveczjxy8480","created":1562638132776,"text":"工厂模式"},"children":[]},{"data":{"id":"bveczk2e26g0","created":1562638133045,"text":"单例模式"},"children":[]}]}]},{"data":{"id":"bvdru9x1ek00","created":1562578475824,"text":"Java基础汇总","layout":null},"children":[{"data":{"id":"bvdrx34kv9s0","created":1562578696135,"text":"反射","expandState":"expand","layout":null},"children":[{"data":{"id":"bvg8rsuiujk0","created":1562829360720,"text":"Class类"},"children":[]},{"data":{"id":"bvg8ru97qtc0","created":1562829363785,"text":"Field类"},"children":[]},{"data":{"id":"bvg8rvk8vgo0","created":1562829366629,"text":"Method类"},"children":[]},{"data":{"id":"bvg8x3ywts00","created":1562829776751,"text":"Constructor类"},"children":[]}]},{"data":{"id":"bvdrxbjn9yg0","created":1562578714461,"text":"注解","layout":null},"children":[{"data":{"id":"bvg8y18f42g0","created":1562829849160,"text":"自定义注解 @interface"},"children":[]}]},{"data":{"id":"bvdrxbulb4w0","created":1562578715122,"text":"异常","layout":null},"children":[{"data":{"id":"bvg86a1tffk0","created":1562827674155,"text":"Throwable"},"children":[{"data":{"id":"bvg86f5yj9s0","created":1562827685289,"text":"Error：内存异常"},"children":[{"data":{"id":"c26pe9zisdc0","created":1587453769312,"text":"如OutOfMemoryError,NoClassDefFoundError"},"children":[]}]},{"data":{"id":"bvg86flcqvs0","created":1562827686220,"text":"Exception：分为可检查（checked）异常和不检查（unchecked）"},"children":[{"data":{"id":"bvg87gdonmo0","created":1562827766297,"text":"CheckedException：如IOException,ClassNotFoundException "},"children":[]},{"data":{"id":"bvg87g3i7ig0","created":1562827765682,"text":"RuntimeException：如NPE"},"children":[]}]}]},{"data":{"id":"bvg87wy96800","created":1562827802370,"text":"处理方式"},"children":[{"data":{"id":"bvg8819z3w80","created":1562827811786,"text":"抛出给调用者"},"children":[{"data":{"id":"bvg889wmpy00","created":1562827830570,"text":"throws"},"children":[]},{"data":{"id":"bvg88a5qayw0","created":1562827831120,"text":"throw"},"children":[]},{"data":{"id":"bvg88hkc53c0","created":1562827847241,"text":"系统自动抛出"},"children":[]}]}]}]},{"data":{"id":"bvdrxczodiw0","created":1562578717607,"text":"内部类","layout":null},"children":[{"data":{"id":"bvg8yo02ugg0","created":1562829898721,"text":"静态内部类"},"children":[{"data":{"id":"bvg8ysfdc1s0","created":1562829908353,"text":"定义在类内部的static修饰的类"},"children":[{"data":{"id":"bvg91p5tsag0","created":1562830136338,"text":"只能够访问外部类静态的成员变量或方法，和外部类对象没有任何相关联","layout_right_offset":{"x":0,"y":-2}},"children":[]},{"data":{"id":"bvg8zb83iu80","created":1562829949272,"text":"可定义静态和非静态的变量、静态和非静态的方法、构造方法"},"children":[]}]}]},{"data":{"id":"bvg91cejn680","created":1562830108567,"text":"非静态内部类","expandState":"expand"},"children":[{"data":{"id":"bvg8z0aee3c0","created":1562829925467,"text":"可访问外部类所有的成员变量，包括私有变量，持有当前外部类的引用，编译后格式为 Object.this.变量或方法"},"children":[]},{"data":{"id":"bvg92tbifaw0","created":1562830223753,"text":"不能有静态成员变量或方法"},"children":[]}]},{"data":{"id":"bvg93jv9ejk0","created":1562830281544,"text":"局部内部类"},"children":[{"data":{"id":"bvg93sm6vqw0","created":1562830300586,"text":"定义在方法内部"},"children":[]}]},{"data":{"id":"bvg93y16csg0","created":1562830312376,"text":"匿名内部类"},"children":[{"data":{"id":"bvg9452jan40","created":1562830327696,"text":"没有类名的局部类，匿名内部类使得类的定义和实例化同时进行"},"children":[]}]}]},{"data":{"id":"bvg96jv6n680","created":1562830516632,"text":"序列化"},"children":[{"data":{"id":"bvg98ezwj1c0","created":1562830662761,"text":"Serializable"},"children":[]},{"data":{"id":"bvg98fwqgvc0","created":1562830664747,"text":"Transient"},"children":[]}]},{"data":{"id":"bvg995dfxcg0","created":1562830720176,"text":"复制","layout_right_offset":{"x":1,"y":-16}},"children":[{"data":{"id":"bvg99dhy6n40","created":1562830737863,"text":"浅复制"},"children":[]},{"data":{"id":"bvg99dvpte00","created":1562830738696,"text":"深复制"},"children":[]},{"data":{"id":"bvg99lvictc0","created":1562830756097,"text":"序列化Clone"},"children":[]}]}]},{"data":{"id":"bvdru9hwb600","created":1562578474909,"text":"Java集合","layout":null},"children":[{"data":{"id":"bvdseiczteo0","created":1562580061487,"text":"Collections","layout":null},"children":[{"data":{"id":"bvf7tonkaco0","created":1562725127254,"text":"List"},"children":[{"data":{"id":"bvf7ui0hje80","created":1562725191162,"text":"ArrayList"},"children":[{"data":{"id":"byledcns9gg0","created":1574321430159,"text":"底层数组保存对象、默认为{}、扩容1.5倍、fail-fast机制、System.arraycopy扩缩容（移动元素缩容后会置null方便GC清理）"},"children":[]}]},{"data":{"id":"bvf7uijrj7k0","created":1562725192328,"text":"LinkedList"},"children":[{"data":{"id":"bylenhxj9rc0","created":1574322225264,"text":"底层双向链表，数据被封装到内部类Node，特别的实现了Deque并提供相关接口"},"children":[]}]},{"data":{"id":"bvf7ulmy4u80","created":1562725199051,"text":"Vector"},"children":[{"data":{"id":"bylf17shz5k0","created":1574323300290,"text":"底层数组实现、所有方法使用synchronized修饰"},"children":[]}]}]},{"data":{"id":"bvf7tp3ivwg0","created":1562725128219,"text":"Set"},"children":[{"data":{"id":"bvffnfalgco0","created":1562747205573,"text":"HashSet"},"children":[{"data":{"id":"bym1ro16m4o0","created":1574387437530,"text":"底层使用HashMap实现、value为static final Object，所有方法均为对HashMap的操作封装"},"children":[]}]},{"data":{"id":"bvffnfmwqwg0","created":1562747206318,"text":"TreeSet"},"children":[{"data":{"id":"bvffog9q3z40","created":1562747286062,"text":"底层使用TreeMap实现，value为static final Object，所有方法均为对TreeMap的操作封装，特别的，元素必须实现Comparable接口"},"children":[]}]},{"data":{"id":"bvffnp05qm00","created":1562747226710,"text":"LinkedHashSet","layout_right_offset":{"x":-3,"y":11}},"children":[{"data":{"id":"bvffupvnvu80","created":1562747777164,"text":"继承自HashSet，由HashSet提供基于LinkedHashMap的构造接口（只提供给LinkedHashSet使用）","layout_right_offset":{"x":-10,"y":-1}},"children":[]}]}]},{"data":{"id":"bvf7tpbjaag0","created":1562725128704,"text":"Queue"},"children":[{"data":{"id":"bvg7t3hd8z40","created":1562826641124,"text":"阻塞队列"},"children":[{"data":{"id":"bvg7t5zopjs0","created":1562826646586,"text":"ArrayBlockingQueue（模板方法设计模式，实现了AbstractQueue类）"},"children":[{"data":{"id":"bym2nbwzy1c0","created":1574389918809,"text":"底层使用对象数组+ReentrantLock+两个位置标识位+两个Condition实现的循环阻塞队列，线程安全，remove时，会有元素移动"},"children":[]}]},{"data":{"id":"bvg7tcdttao0","created":1562826660501,"text":"LinkedBlockingQueue（模板方法模式，实现了AbstractQueue类）"},"children":[{"data":{"id":"bypok2vhkbk0","created":1574756408322,"text":"底层使用链表+ReentrantLock+头尾指针+两个Condition实现无界队列，线程安全，默认最大容量capacity大小为Integer.Max"},"children":[]}]},{"data":{"id":"bvg7tck2jj40","created":1562826660878,"text":"PriorityBlockingQueue（模板方法模式，实现了AbstractQueue类）"},"children":[{"data":{"id":"bypoqzvua4o0","created":1574756950362,"text":"底层使用对象数组+ReentrantLock+两个位置标识位+两个Condition实现的循环阻塞队列，对象数组为堆结构，线程安全，特别的对象中保存了Comparator变量用于比较对象权值大小，构建队列时必须指定Comparator参数，默认capacity大小为11"},"children":[]}]},{"data":{"id":"bvg7tcmg77c0","created":1562826661022,"text":"DelayQueue"},"children":[]},{"data":{"id":"bvg7tcp8bxk0","created":1562826661190,"text":"SynchronousQueue"},"children":[]},{"data":{"id":"bvg7tcsfgyg0","created":1562826661384,"text":"LinkedTransferQueue"},"children":[]},{"data":{"id":"bvg7tf8gth40","created":1562826666707,"text":"LinkedBlockingDeque"},"children":[]}]}]}]},{"data":{"id":"bvdseiwcgq80","created":1562580062657,"text":"Map","layout":null},"children":[{"data":{"id":"bvf7u0m0zg80","created":1562725153283,"text":"HahsMap"},"children":[{"data":{"id":"bys2f0agl800","created":1574998626328,"text":"底层使用数组对象保存数据，其中每个对象都为链表结构，即每个对象保存next指针，当链表结点大于8个时，会转为红黑树，但是红黑树结点TreeNode也是链表结点的子类，所以仍可以通过直接链表遍历整个红黑树，如containsValue方法"},"children":[]},{"data":{"id":"byukp9bh4680","created":1575253329514,"text":"Collections.synchronizedMap(hashMap) 底层所有方法增加了Synchronized修饰"},"children":[]}]},{"data":{"id":"bvf7u18jui00","created":1562725154645,"text":"HashTable"},"children":[{"data":{"id":"byukqp6mjbc0","created":1575253442413,"text":"继承自Dictionary，所有主要方法使用Synchronized修饰,存放的value不能为null,为空时直接抛出NPE,key也不能为空，为空时回去hashcode异常"},"children":[]}]},{"data":{"id":"bvfh8d2109s0","created":1562751667459,"text":"LinkHashMap"},"children":[{"data":{"id":"byulqtetbf40","created":1575256272725,"text":"底层是双向链表实现并保存有头尾结点引用，此类继承自HashMap，结点Entry是HashMap结点Node的子类，默认访问顺序为插入顺序，可指定为访问顺序，获取和插入元素时都是使用的Hashmap的方法，只不过获取元素时如果指定为访问顺序，则会调整元素"},"children":[]}]},{"data":{"id":"bvf7u1iqfgo0","created":1562725155260,"text":"TreeMap"},"children":[{"data":{"id":"byup509tnu80","created":1575265848089,"text":"底层使用二叉查找树即CLR红黑树实现，内部只有一个root引用，数据结点封装Entry是HashMap结点Node的子类，Entry中有父节点引用和左右孩子结点引用，插入数据元素必须手工提供Comparator接口或者数据元素已实现Comparator接口，插入数据已存在的，默认覆盖并返回旧数据，如果不存在，则找到后插入新结点并检查修复CLR"},"children":[]}]}]}]},{"data":{"id":"bvdru9m4n400","created":1562578475165,"text":"Java多线程并发","layout":null},"children":[{"data":{"id":"bzl42lfljv40","created":1577948534580,"text":"Java内存模型（JMM）"},"children":[{"data":{"id":"bzl42u4lxlc0","created":1577948553507,"text":"Java线程<->工作内存<->操作<->主内存"},"children":[{"data":{"id":"bzl43orw2ns0","created":1577948620218,"text":"各个环节操作共8种：lock/unlock/read/load/use/assign/store/write"},"children":[]}]},{"data":{"id":"c2k9uluzhcw0","created":1588831750632,"text":"Happen-before关系：是Java内存模型中保证多线程操作可见性的机制，JMM内部的实现通常是依赖于所谓的内存屏障，通过禁止某些重排序的方式，提供内存可见性保证，也就是实现了各种happen-before规则。"},"children":[]}]},{"data":{"id":"bvfh8pp5o740","created":1562751694979,"text":"创建线程"},"children":[{"data":{"id":"bvfh8tc06zc0","created":1562751702891,"text":"Thread"},"children":[]},{"data":{"id":"bvfh8tmxyzk0","created":1562751703552,"text":"Runnable"},"children":[]},{"data":{"id":"bvfh8tw963c0","created":1562751704115,"text":"Callable"},"children":[]}]},{"data":{"id":"bvfhf37mwpc0","created":1562752194579,"text":"终止线程"},"children":[{"data":{"id":"bvfhf80j86w0","created":1562752205034,"text":"正常执行完成"},"children":[]},{"data":{"id":"bvfhfcsu7qg0","created":1562752215452,"text":"Interrupt 方法结束线程"},"children":[{"data":{"id":"bvfhgc0353c0","created":1562752292078,"text":"interrupted()"},"children":[]},{"data":{"id":"bvfhgcke3ig0","created":1562752293306,"text":"isInterrupted()"},"children":[]}]},{"data":{"id":"bvfhh53nsv40","created":1562752355421,"text":"Stop 方法终止线程"},"children":[]}]},{"data":{"id":"bvfhcighffs0","created":1562751992674,"text":"线程生命周期在Thread内部枚举State"},"children":[{"data":{"id":"bvfhct3x9e00","created":1562752015859,"text":"NEW：新建"},"children":[{"data":{"id":"c2ayv48er940","created":1587886718795,"text":"表示线程被创建出来还没真正启动的状态，可以认为它是个Java内部状态。"},"children":[]}]},{"data":{"id":"bvfhctvnark0","created":1562752017535,"text":"RUNNABLE：就绪"},"children":[{"data":{"id":"c2ayve330go0","created":1587886740241,"text":"表示该线程已经在JVM中执行，当然由于执行需要计算资源，它可能是正在运行，也可能还在等待系统分配给它CPU片段，在就绪队列里面排队。"},"children":[]}]},{"data":{"id":"bvfhcuqrl280","created":1562752019417,"text":"运行（Java API中没有这个状态）"},"children":[]},{"data":{"id":"bvfhcvwls0g0","created":1562752021947,"text":"BLOCKED：阻塞"},"children":[{"data":{"id":"c2ayvspnxcw0","created":1587886772081,"text":"阻塞表示线程在等待Monitor lock。","expandState":"expand"},"children":[{"data":{"id":"bvfhdfylmlc0","created":1562752065603,"text":"等待阻塞(o.wait->等待对列）"},"children":[]},{"data":{"id":"bvfhdge9fc80","created":1562752066550,"text":"同步阻塞(lock->锁池)"},"children":[]},{"data":{"id":"bvfhdgkoofk0","created":1562752066938,"text":"其他阻塞(sleep/join) "},"children":[]}]}]},{"data":{"id":"c2aytqvwo200","created":1587886611377,"text":"WAITING：等待/TIMED_WAIT：计时等待"},"children":[{"data":{"id":"c2aywblpfoo0","created":1587886813201,"text":"表示正在等待其他线程采取某些操作。"},"children":[]}]},{"data":{"id":"bvfhcw6va080","created":1562752022567,"text":"TERMINATED：终止"},"children":[{"data":{"id":"c2ayxkofjxk0","created":1587886911321,"text":"表示意外退出或正常执行结束，线程已经完成使命，终止运行。"},"children":[]}]}]},{"data":{"id":"bvfhac6j0co0","created":1562751822283,"text":"线程池："},"children":[{"data":{"id":"bvfh9i29ww00","created":1562751756722,"text":"顶级接口 Executor"},"children":[{"data":{"id":"bvfh9ndg5u00","created":1562751768282,"text":"newCachedThreadPool"},"children":[{"data":{"id":"c2cmg4l1oww0","created":1588054810691,"text":"它是一种用来处理大量短时间工作任务的线程池，特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过60秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用SynchronousQueue作为工作队列。"},"children":[]}]},{"data":{"id":"bvfh9nuau140","created":1562751769300,"text":"newFixedThreadPool"},"children":[{"data":{"id":"c2cmgu4u2280","created":1588054866307,"text":"重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有nThreads个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目nThreads。"},"children":[]}]},{"data":{"id":"bvfh9o32swg0","created":1562751769831,"text":"newScheduledThreadPool"},"children":[{"data":{"id":"c2cmhk8pkc00","created":1588054923138,"text":"可以进行定时或周期性的工作调度"},"children":[]}]},{"data":{"id":"bvfh9obyfo80","created":1562751770368,"text":"newSingleThreadExecutor"},"children":[{"data":{"id":"c2cmh5yut9k0","created":1588054892067,"text":"工作线程数目被限制为1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目。"},"children":[]}]},{"data":{"id":"c2cmhs43t200","created":1588054940274,"text":"newWorkStealingPool(int parallelism)"},"children":[{"data":{"id":"c2cmhyd1duo0","created":1588054953875,"text":"Java 8才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序。"},"children":[]}]}]},{"data":{"id":"bvfhaf5hbz40","created":1562751828750,"text":"原理"},"children":[{"data":{"id":"bvfhai8cego0","created":1562751835453,"text":"ThreadPoolExecutor"},"children":[{"data":{"id":"bvfhbbbr77s0","created":1562751898786,"text":"corePoolSize\nmaximumPoolSize\nkeepAliveTime\n\t                      timeUnit\n\t                      blockingQueue"},"children":[]}]}]},{"data":{"id":"bvg7q2cevn40","created":1562826403555,"text":"拒绝策略"},"children":[{"data":{"id":"bvg7q916u1s0","created":1562826418114,"text":"AbortPolicy ： 直接抛出异常，阻止系统正常运行。"},"children":[]},{"data":{"id":"bvg7qbw57i80","created":1562826424339,"text":"CallerRunsPolicy："},"children":[]},{"data":{"id":"bvg7qc58lx40","created":1562826424889,"text":"DiscardOldestPolicy"},"children":[]},{"data":{"id":"bvg7qccqnrk0","created":1562826425342,"text":"DiscardPolicy"},"children":[]}]}]},{"data":{"id":"bvg7emebus00","created":1562825506844,"text":"JAVA锁","expandState":"expand"},"children":[{"data":{"id":"bvg7zh78pm00","created":1562827141171,"text":"锁机制"},"children":[{"data":{"id":"bvg7zoyy51c0","created":1562827158084,"text":"CAS"},"children":[{"data":{"id":"bvg7zxe68w00","created":1562827176419,"text":"ABA问题（虽然大部分ABA问题不会影响并发的正确性，如需要解决，不如改用传统的护齿同步）"},"children":[]}]},{"data":{"id":"bvg7zpab0hk0","created":1562827158771,"text":"AQS"},"children":[{"data":{"id":"bvg80wv5vsw0","created":1562827253634,"text":"实现","expandState":"expand"},"children":[{"data":{"id":"bvg804egri80","created":1562827191674,"text":"volatile int state 共享资源状态"},"children":[]},{"data":{"id":"bvg80h5f8m80","created":1562827219426,"text":"FIFO 线程等待队列"},"children":[]}]},{"data":{"id":"bvg80s8gtz40","created":1562827243554,"text":"共享方式"},"children":[{"data":{"id":"bvg814eksqo0","created":1562827270045,"text":"独占资源：Exclusive"},"children":[{"data":{"id":"bvg81ja3d080","created":1562827302426,"text":"ReentrantLock"},"children":[]}]},{"data":{"id":"bvg81ap2sps0","created":1562827283741,"text":"共享资源：Share"},"children":[{"data":{"id":"bvg81n313k00","created":1562827310706,"text":"Semaphore/CountDownLatch"},"children":[]}]}]}]}]},{"data":{"id":"bvg7gg1a1rc0","created":1562825649715,"text":"乐观锁"},"children":[]},{"data":{"id":"bvg7gidfze00","created":1562825654804,"text":"悲观锁"},"children":[]},{"data":{"id":"bvg7mi3crdc0","created":1562826124379,"text":"可重入锁"},"children":[]},{"data":{"id":"bvg7n1ev8ts0","created":1562826166434,"text":"共享锁和独占锁"},"children":[]},{"data":{"id":"bvg7n52ip7k0","created":1562826174394,"text":"重量级锁"},"children":[]},{"data":{"id":"bvg7nwn8mzk0","created":1562826234420,"text":"锁优化","expandState":"expand"},"children":[{"data":{"id":"bzl5kp0ogxk0","created":1577952774050,"text":"偏向锁"},"children":[]},{"data":{"id":"bzl5k6o2nko0","created":1577952734106,"text":"自旋锁/自适应自旋锁"},"children":[]},{"data":{"id":"bvg7n8lens00","created":1562826182067,"text":"轻量级锁"},"children":[]},{"data":{"id":"bvg7o2xpc1k0","created":1562826248114,"text":"锁粗化"},"children":[]},{"data":{"id":"bvg7o8avdio0","created":1562826259794,"text":"锁消除"},"children":[]}]},{"data":{"id":"bvg7ih8egzk0","created":1562825809051,"text":"Synchronized"},"children":[{"data":{"id":"bvjoime33iw0","created":1563178459017,"text":"实现原理"},"children":[{"data":{"id":"bvjoiy1rl4o0","created":1563178484393,"text":"synchronized的对象锁，其指针指向的是一个monitor对象（由C++实现）的起始地址。每个对象实例都会有一个 monitor。其中monitor可以与对象一起创建、销毁；亦或者当线程试图获取对象锁时自动生成。在Java 6之前，Monitor的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作。现代的JDK中，JVM对此进行改进，提供了三种不同的Monitor实现，即三种不同的锁：偏斜锁、轻量级锁和重量级锁，大大改进了其性能。"},"children":[]}]},{"data":{"id":"bvjoi0a0s280","created":1563178410882,"text":"修饰static方法"},"children":[]},{"data":{"id":"bvjoi0s3geo0","created":1563178411975,"text":"修饰非static方法"},"children":[{"data":{"id":"bvjojrh4xuw0","created":1563178548449,"text":"ACC_SYNCHRONIZED的flag标识"},"children":[]}]},{"data":{"id":"bvjoi11ncm00","created":1563178412553,"text":"修饰obj"},"children":[{"data":{"id":"bvjojchwi740","created":1563178515844,"text":"monitorenter和monitorexit指令"},"children":[]}]}]},{"data":{"id":"bvg7lqk4ffk0","created":1562826064443,"text":"ReentrantLock"},"children":[]},{"data":{"id":"bvg7mn4uu1s0","created":1562826135354,"text":"ReadWriteLock"},"children":[]},{"data":{"id":"bvg7m46uk480","created":1562826094115,"text":"Semaphore"},"children":[]},{"data":{"id":"bvg7vwupsio0","created":1562826861786,"text":"CountDownLatch"},"children":[]},{"data":{"id":"bvg7vi3j04g0","created":1562826829667,"text":"CyclicBarrier"},"children":[]},{"data":{"id":"bvg7m4ebwj40","created":1562826094568,"text":"AtomicInteger"},"children":[]}]},{"data":{"id":"bvg7pexrjtk0","created":1562826352603,"text":"死锁"},"children":[{"data":{"id":"bvjmzhvzpuw0","created":1563174139188,"text":"请求保持"},"children":[]},{"data":{"id":"bvjmzlq33vs0","created":1563174147537,"text":"非剥夺"},"children":[]},{"data":{"id":"bvjmzo4ce140","created":1563174152752,"text":"互斥"},"children":[]},{"data":{"id":"bvjmzru98co0","created":1563174160849,"text":"循环等待"},"children":[]}]},{"data":{"id":"bvg7wwumvps0","created":1562826940145,"text":"数据共享"},"children":[{"data":{"id":"bvg7x02teio0","created":1562826947170,"text":"Volatile"},"children":[{"data":{"id":"bzl45swqgds0","created":1577948785946,"text":"可见性：指当一个线程修改了这个修饰的变量，新值对于其他线程立即得知的，即对volatile变量的写操作能立刻反应到其他线程中。"},"children":[]},{"data":{"id":"bzl4a5lnvkw0","created":1577949127032,"text":"禁止指令重排序优化"},"children":[]},{"data":{"id":"bzl48vz4rr40","created":1577949027714,"text":"如要实现原子性必须：1运算结果不依赖变量的当前值或由单一线程改变变量的值 2 变量不需要其他状态变量共同参与"},"children":[]}]},{"data":{"id":"bzl4jevzjbk0","created":1577949852525,"text":"final也能实现可见性"},"children":[]},{"data":{"id":"bvg7x0m5o8w0","created":1562826948340,"text":"ThreadLocal"},"children":[]}]}]},{"data":{"id":"bvdru9pz0b40","created":1562578475397,"text":"JVM","layout":null},"children":[{"data":{"id":"bvfedhuadv40","created":1562743606366,"text":"类加载子系统"},"children":[{"data":{"id":"bvff9d1fi0g0","created":1562746103567,"text":"类加载机制"},"children":[{"data":{"id":"bvff9jfgw000","created":1562746117477,"text":"加载"},"children":[{"data":{"id":"bzjghruzmdc0","created":1577780457440,"text":"从zip/网络/动态代理生成$Proxy等途径获取二进制字节流，并生成对应Class对象，只不过这个对象是存在方法区中"},"children":[]}]},{"data":{"id":"bvff9joj4ko0","created":1562746118025,"text":"连接"},"children":[{"data":{"id":"bvff9r7abqo0","created":1562746134396,"text":"验证"},"children":[{"data":{"id":"bzjgb53wops0","created":1577779937728,"text":"格式验证/元数据验证/字节码验证"},"children":[]}]},{"data":{"id":"bvff9rfjm4w0","created":1562746134896,"text":"准备"},"children":[{"data":{"id":"bvffahxtefc0","created":1562746192597,"text":"注意：如果是静态变量，则初始化为原始值，如果为final，则直接赋值，非final是在类构造器<client>方法之中赋值的"},"children":[]}]},{"data":{"id":"bvff9rprgq80","created":1562746135513,"text":"解析"},"children":[{"data":{"id":"bvffbkvnizk0","created":1562746277360,"text":"将常量池中的符号引用替换为直接引用"},"children":[{"data":{"id":"c2dc90w69cg0","created":1588127602965,"text":"在编译的时候一个每个java类都会被编译成一个class文件，但在编译的时候虚拟机并不知道所引用类的地址，多以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。"},"children":[]}]}]}]},{"data":{"id":"bvff9jw33mo0","created":1562746118481,"text":"初始化"},"children":[{"data":{"id":"bvffc4bh37c0","created":1562746319676,"text":"执行<client>方法，此方法是由编译器自动收集类中所有类变量赋值语句和静态语句块合并产生，顺序有语句顺序决定"},"children":[]}]}]},{"data":{"id":"bvff93nm9vc0","created":1562746083141,"text":"类加载器","expandState":"expand"},"children":[{"data":{"id":"bvfedmqd2tc0","created":1562743617013,"text":"BootStrap ClassLoader"},"children":[]},{"data":{"id":"bvfedn1tsiw0","created":1562743617706,"text":"Ext ClassLoader"},"children":[]},{"data":{"id":"bvfedndo5lk0","created":1562743618422,"text":"App ClassLoader"},"children":[]},{"data":{"id":"bvffcnc1hr40","created":1562746361069,"text":"自定义 ClassLoader"},"children":[]},{"data":{"id":"bvffe25spnc0","created":1562746471707,"text":"双亲委派机制"},"children":[]},{"data":{"id":"bzjgks13sgo0","created":1577780692902,"text":"类加载器不仅用来加载类，对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性，否则，即使两个类来自同一个Class文件，被同一个虚拟机加载，也不一定相等。"},"children":[]}]}]},{"data":{"id":"bvfebjhxv8g0","created":1562743453245,"text":"运行时数据区"},"children":[{"data":{"id":"bvfebvtqbs00","created":1562743480079,"text":"线程共享"},"children":[{"data":{"id":"bvfec16v56g0","created":1562743491757,"text":"方法区"},"children":[{"data":{"id":"bvfefrmvbwo0","created":1562743784414,"text":"运行时常量池是方法区的一部分，Java的常量池可以存放各种常量信息，不管是编译期生成的各种字面量，还是需要在运行时决定的符号引用，所以它比一般语言的符号表存储的信息更加宽泛。"},"children":[]},{"data":{"id":"c2ec5a7zctc0","created":1588228869770,"text":"这也是所有线程共享的一块内存区域，用于存储所谓的元（Meta）数据，例如类结构信息，以及对应的运行时常量池、字段、方法代码等。由于早期的Hotspot JVM实现，很多人习惯于将方法区称为永久代（Permanent Generation）。Oracle JDK 8中将永久代移除，同时增加了元数据区（Metaspace）。"},"children":[]}]},{"data":{"id":"bvfec1kjhcw0","created":1562743492584,"text":"堆 FullGC"},"children":[{"data":{"id":"bvfefzsghfc0","created":1562743802166,"text":"新生代  1/3  MinorGC  复制算法"},"children":[{"data":{"id":"bvfegg3no9s0","created":1562743837671,"text":"Eden  2"},"children":[]},{"data":{"id":"bvfeggwzkeg0","created":1562743839445,"text":"From Survivor  1"},"children":[]},{"data":{"id":"bvfegh8urmw0","created":1562743840162,"text":"To Survivor  1"},"children":[]}]},{"data":{"id":"bvfeg7wldnc0","created":1562743819830,"text":"老年代  2/3  MajorGC  标记清除"},"children":[]}]}]},{"data":{"id":"bvfebw50gco0","created":1562743480761,"text":"线程私有"},"children":[{"data":{"id":"bvfec8x8xpc0","created":1562743508590,"text":"虚拟机栈"},"children":[{"data":{"id":"bzkxxj16uhc0","created":1577931210875,"text":"元素为栈帧：局部变量表/操作数栈/动态连接/方法返回地址/额外信息"},"children":[{"data":{"id":"bzkxzucj4080","created":1577931392234,"text":"局部变量表：存放方法参数和方法内定义的局部变量"},"children":[]},{"data":{"id":"bzkzuyxft280","created":1577936652604,"text":"操作数栈：栈帧互相独立，但虚拟机多会进行优化，使上个局部变量表和下个栈的操作数栈重叠在一起，减少额外的参数复制操作"},"children":[]},{"data":{"id":"bzl018i1mz40","created":1577937143626,"text":"动态链接：每个栈帧都包含一个指向运行时常量池的该栈帧所属方法的引用"},"children":[]}]}]},{"data":{"id":"bvfeckrt5bc0","created":1562743534382,"text":"本地方法栈"},"children":[]},{"data":{"id":"bvfecl66l8o0","created":1562743535251,"text":"程序计数器"},"children":[]}]},{"data":{"id":"bvfeeojeno00","created":1562743699310,"text":"直接内存"},"children":[{"data":{"id":"bvfelvryxnc0","created":1562744263614,"text":"JAVA8中取消方法区，而将元数据区放到直接内存里"},"children":[]}]}]},{"data":{"id":"bvfemzd5jns0","created":1562744349789,"text":"GC：老年代GC叫作Major GC，非老年代GC叫minor GC，一般MajorGC后将对整个堆进行的清理叫作Full GC"},"children":[{"data":{"id":"bvfenexqa280","created":1562744383685,"text":"对象可达性"},"children":[{"data":{"id":"bvfenrp3g9s0","created":1562744411461,"text":"引用计数法"},"children":[{"data":{"id":"bvfeo3hkjc00","created":1562744437128,"text":"循环引用问题"},"children":[]}]},{"data":{"id":"bvfensaiyhs0","created":1562744412757,"text":"根搜索算法"},"children":[{"data":{"id":"bvfeo75l7hs0","created":1562744445110,"text":"GC Roots"},"children":[{"data":{"id":"bvfeodw8zko0","created":1562744459783,"text":"方法区中引用：类静态属性/方法区常量"},"children":[]},{"data":{"id":"bvfeoe8l23s0","created":1562744460529,"text":"栈中引用"},"children":[]},{"data":{"id":"bvfeoefggjk0","created":1562744460945,"text":"本地方法栈引用（JNI引用）"},"children":[]}]},{"data":{"id":"bzilry9les00","created":1577693800618,"text":"对象引用类型（有些对象“食之无味，弃之可惜”，由此产生了不同引用类型）"},"children":[{"data":{"id":"bzilt8huimo0","created":1577693901249,"text":"强引用：Object obj = new Object();"},"children":[]},{"data":{"id":"bzilt9dghdc0","created":1577693903160,"text":"软引用：内存溢出前回收，内存还不够则溢出。只有当JVM认为内存不足时，才会去试图回收软引用指向的对象。JVM会确保在抛出OutOfMemoryError之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓\n\n存的同时，不会耗尽内存。"},"children":[]},{"data":{"id":"bzilt9vq79c0","created":1577693904265,"text":"弱引用：生命周期只能到下一次垃圾回收前，下一次GC后则被回收。以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。"},"children":[]},{"data":{"id":"bzilta939nk0","created":1577693905073,"text":"虚引用/幻象引用：无法直接通过虚引用获取对象实例，存在的意义即被回收时收到系统通知。幻象引用仅仅是提供了一种确保对象被fnalize以后，做某些事情的机制，比如，通常用来做所谓的PostMortem清理机制，Java平台自身Cleaner机制等，也有人利用幻象引用监控对象的创建和销毁。"},"children":[]}]}]}]},{"data":{"id":"bvfep9nvsyo0","created":1562744528934,"text":"GC算法"},"children":[{"data":{"id":"bvfepe4z6bs0","created":1562744538675,"text":"标记清除算法"},"children":[{"data":{"id":"bvfey2l02zs0","created":1562745218800,"text":"标记、清除过程效率有限，内存碎片化严重"},"children":[]}]},{"data":{"id":"bvfephaikr40","created":1562744545540,"text":"复制算法"},"children":[{"data":{"id":"bvfey8r3j3c0","created":1562745232229,"text":"可用内存压缩一半"},"children":[]}]},{"data":{"id":"bvfepm6elrs0","created":1562744556176,"text":"标记整理算法"},"children":[{"data":{"id":"bzimee1s5ko0","created":1577695558986,"text":"先标记，再推向一边"},"children":[]}]},{"data":{"id":"bvfer7xfdsg0","created":1562744681886,"text":"分代收集算法"},"children":[]}]},{"data":{"id":"bvfesqhm5tk0","created":1562744800654,"text":"GC收集器：垃圾收集器（GC，Garbage Collector）是和具体JVM实现紧密相关的，不同厂商（IBM、Oracle），不同版本的JVM，提供的选择也不同。以下为最主流的Oracle JDK。"},"children":[{"data":{"id":"bvfeuvglta00","created":1562744968204,"text":"Serial收集器"},"children":[{"data":{"id":"c2jalrpcpxk0","created":1588732319216,"text":"Serial GC，它是最古老的垃圾收集器，“Serial”体现在其收集工作是单线程的，并且在进行垃圾收集过程中，会进入臭名昭著的“Stop-The-World”状态。当然，其单线程设计也意味着精简的GC实现，无需维护复杂的数据结构，初始化也简单，所以一直是Client模式下JVM的默认选项。\n从年代的角度，通常将其老年代实现单独称作Serial Old，它采用了标记-整理（Mark-Compact）算法，区别于新生代的复制算法。\nSerial GC的对应JVM参数是：-XX:+UseSerialGC"},"children":[]}]},{"data":{"id":"bvfeuvsmik00","created":1562744968931,"text":"ParNew收集器"},"children":[{"data":{"id":"c2jao8ufu600","created":1588732513257,"text":"它实际是Serial GC的多线程版本，最常见的应用场景是配合老年代的CMS GC工作，下面是对应参数：-XX:+UseConcMarkSweepGC -XX:+UseParNewGC"},"children":[]}]},{"data":{"id":"bvfeuvuqjxs0","created":1562744969059,"text":"Parallel收集器"},"children":[{"data":{"id":"c2jaq1rziog0","created":1588732654600,"text":"在早期JDK 8等版本中，它是server模式JVM的默认GC选择，也被称作是吞吐量优先的GC。它的算法和Serial GC比较相似，特点是新生代和老年代GC都是并行进行的，在常见的服务器环境中更加高效。开启选项是：-XX:+UseParallelGC"},"children":[]}]},{"data":{"id":"bvfeuw18tw00","created":1562744969452,"text":"CMS收集器"},"children":[{"data":{"id":"c2jap8e1ajs0","created":1588732590630,"text":"CMS（Concurrent Mark Sweep） GC，基于标记-清除（Mark-Sweep）算法，设计目标是尽量减少停顿时间。但是，CMS采用的标记-清除算法，存在着内存碎片化问题，所以难以避免在长时间运行等情况下发生full GC，导致恶劣的停顿。另外，既然强调了并发（Concurrent），CMS会占用更多CPU资源，并和用户线程争抢。"},"children":[]},{"data":{"id":"bvfevuh3jjc0","created":1562745044422,"text":"初始标记（CMS initial mark）Stop The World\n并发标记（CMS concurrent mark）\n重新标记（CMS remark）\n并发清除（CMS concurrent sweep）"},"children":[]}]},{"data":{"id":"bvfeuw364q80","created":1562744969569,"text":"G1收集器"},"children":[{"data":{"id":"c2jari84htk0","created":1588732768768,"text":"G1 GC这是一种兼顾吞吐量和停顿时间的GC实现，是Oracle JDK 9以后的默认GC选项。G1可以直观的设定停顿时间的目标，相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。\nG1 GC仍然存在着年代的概念，但是其内存结构并不是简单的条带式划分，而是类似棋盘的一个个region。Region之间是复制算法，但整体上实际可看作是标记-整理（Mark-Compact）算法，可以有效地避免内存碎片，尤其是当Java堆非常大的时候，G1的优势更加明显。\nG1吞吐量和停顿表现都非常不错，并且仍然在不断地完善，与此同时CMS已经在JDK 9中被标记为废弃（deprecated），"},"children":[]}]}]},{"data":{"id":"bvjlizy59z40","created":1563170025198,"text":"类回收条件"},"children":[{"data":{"id":"bvjlj3ttlf40","created":1563170033644,"text":"首先该类的所有实例（堆中）都已经被回收"},"children":[]},{"data":{"id":"bvjlj3xdyds0","created":1563170033859,"text":"其次该类的ClassLoader已经被回收"},"children":[]},{"data":{"id":"bvjlj4a21bc0","created":1563170034625,"text":"最后，对该类对应的Class对象没有任何引用。"},"children":[]}]}]},{"data":{"id":"bvfexaubi1s0","created":1562745158414,"text":"参数"},"children":[]}]},{"data":{"id":"c2brunw3x1c0","created":1587968495410,"text":"JUC"},"children":[{"data":{"id":"c2bs3d5twko0","created":1587969177331,"text":"java.util.concurrent包提供的容器（Queue、List、Set）、Map，从命名上可以大概区分为Concurrent、CopyOnWrite和Blocking*等三类，","expandState":"expand"},"children":[{"data":{"id":"c2brvgbxbmw0","created":1587968557316,"text":"Concurrent类型没有类似CopyOnWrite之类容器相对较重的修改开销。Concurrent往往提供了较低的遍历一致性。例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历。"},"children":[]},{"data":{"id":"c2bryy66chs0","created":1587968831243,"text":"与弱一致性对应的，就是同步容器常见的行为“fast-fail”，也就是检测到容器在遍历过程中发生了修改，则抛出ConcurrentModifcationException，不再继续遍历。弱一致性的另外一个体现是，size等操作准确性是有限的，未必是100%准确。"},"children":[]}]}]},{"data":{"id":"bvdru9tjlhc0","created":1562578475613,"text":"IO与NIO","layout":null,"expandState":"expand"},"children":[{"data":{"id":"bvff4vhw1400","created":1562745751924,"text":"分类","expandState":"expand"},"children":[{"data":{"id":"bvff3em4nc80","created":1562745636811,"text":"阻塞"},"children":[]},{"data":{"id":"bvff3ewlrgg0","created":1562745637444,"text":"非阻塞"},"children":[]},{"data":{"id":"bvff5lee4o00","created":1562745808309,"text":"多路复用"},"children":[]},{"data":{"id":"bvff5m89apk0","created":1562745810114,"text":"信号驱动"},"children":[]},{"data":{"id":"bvff5ng57e00","created":1562745812768,"text":"异步"},"children":[]}]},{"data":{"id":"bvff3cxamrs0","created":1562745633132,"text":"IO（面向流，同步阻塞，数据传输单向）","expandState":"expand"},"children":[{"data":{"id":"bvff6adpf8o0","created":1562745862687,"text":"字节流"},"children":[{"data":{"id":"bvff6gq13yo0","created":1562745876493,"text":"InputStream"},"children":[]},{"data":{"id":"bvff6gy7qao0","created":1562745876987,"text":"OutputStream"},"children":[]}]},{"data":{"id":"bvff6an9suw0","created":1562745863265,"text":"字符流"},"children":[{"data":{"id":"bvff6nr4ufc0","created":1562745891797,"text":"Reader"},"children":[]},{"data":{"id":"bvff6o2xl080","created":1562745892510,"text":"Writer"},"children":[]}]}]},{"data":{"id":"bvff3krmh7k0","created":1562745650204,"text":"NIO（面向缓冲区，同步非阻塞，数据传输可双向，数据传输时阻塞，Selector轮询：非直接缓冲区/直接缓冲区）"},"children":[{"data":{"id":"bvff6x9xwgw0","created":1562745912525,"text":"Channel（类似于火车道，只传输，不保存数据）"},"children":[{"data":{"id":"c091x76g65s0","created":1580379908471,"text":"数据传输：transferFrom/transferTo"},"children":[]}]},{"data":{"id":"bvff6xjaamw0","created":1562745913090,"text":"Buffer"},"children":[]},{"data":{"id":"bvff6xsuj2g0","created":1562745913668,"text":"Selector"},"children":[]}]},{"data":{"id":"c0apkt0ptfk0","created":1580548203874,"text":"AIO（面向缓冲区，异步非阻塞，是对NIO中Selector轮询的升级，为OS层面的通知）"},"children":[]},{"data":{"id":"c0apjxt7hjs0","created":1580548135940,"text":"Netty（在Linux中，是对NIO的封装）"},"children":[{"data":{"id":"c0c8l9c4hio0","created":1580703400438,"text":"粘包拆包问题：固定长度传送或者固定后缀"},"children":[]}]}]},{"data":{"id":"bvdrua0ahcg0","created":1562578476021,"text":"SQL","layout":null},"children":[{"data":{"id":"bvg9oq07jf40","created":1562831940551,"text":"SQL优化"},"children":[{"data":{"id":"bvg9q8ikv6o0","created":1562832059208,"text":"数据库锁"},"children":[{"data":{"id":"bvg9qi9ynpc0","created":1562832080455,"text":"SELECT … FOR UPDATE 上锁/COMMIT 或 ROLLBACK 释放锁"},"children":[]}]}]},{"data":{"id":"bvg9owa6sq80","created":1562831954215,"text":"MySQL数据库"},"children":[{"data":{"id":"bvg9p2i1b1c0","created":1562831967751,"text":"数据库引擎"},"children":[{"data":{"id":"bvg9p78bq4w0","created":1562831978047,"text":"MyIsam"},"children":[]},{"data":{"id":"bvg9pe1hgs80","created":1562831992871,"text":"InnoDB"},"children":[]}]}]},{"data":{"id":"bvg9r8l8zkw0","created":1562832137734,"text":"MyCat分库分表"},"children":[]}]},{"data":{"id":"bvg9u2e4j6o0","created":1562832359335,"text":"分布式","expandState":"expand","layout_right_offset":{"x":-8.333333002196468,"y":34.16666530900534}},"children":[{"data":{"id":"bvg9t09loco0","created":1562832276344,"text":"分布式事务"},"children":[{"data":{"id":"bvg9t40hgxs0","created":1562832284499,"text":"CAP分布式理论"},"children":[{"data":{"id":"bvh2fybe8tc0","created":1562913065552,"text":"Consistency一致性"},"children":[{"data":{"id":"bvh2g3tyzs00","created":1562913077559,"text":"数据的强一致，也称为线性一致性，是指在分布式环境中，数据在多个副本之间是否能够保持一致的特性。"},"children":[]}]},{"data":{"id":"bvh2gc4g61s0","created":1562913095607,"text":"Availability可用性"},"children":[{"data":{"id":"bvh2gkvzz2w0","created":1562913114687,"text":"任意被无故障节点接收到的请求，必须能够在有限的时间内响应结果。"},"children":[]}]},{"data":{"id":"bvh2gp3r55k0","created":1562913123863,"text":"Partition tolerance分区容错性（基本要保证的）"},"children":[{"data":{"id":"bvh2gvog3go0","created":1562913138175,"text":"如果集群中的机器被分成了两部分，这两部分不能互相通信，系统是否能继续正常工作。"},"children":[]}]},{"data":{"id":"c21o6gy676o0","created":1586942536661,"text":"分析：ZooKeeper基于CP，不保证高可用，如果zookeeper正在选主，或者Zookeeper集群中半数以上机器不可用，那么将无法获得数据。Eureka基于AP，能保证高可用，即使所有机器都挂了，也能拿到本地缓存的数据。作为注册中心，其实配置是不经常变动的，只有发版和机器出故障时会变。对于不经常变动的配置来说，CP是不合适的，而AP在遇到问题时可以用牺牲一致性来保证可用性，既返回旧数据，缓存数据。"},"children":[]}]},{"data":{"id":"bvh2ikc26g00","created":1562913270209,"text":"解决方案","expandState":"expand"},"children":[{"data":{"id":"c1h8c7hsy000","created":1584866649373,"text":"二阶段提交"},"children":[]},{"data":{"id":"bvh2i86x6zc0","created":1562913243777,"text":"基于消息中间件的最终一致性方案"},"children":[]},{"data":{"id":"bvh2j4mlg2o0","created":1562913314382,"text":"XA 协议"},"children":[]},{"data":{"id":"bvh2j7v6bkg0","created":1562913321431,"text":"TCC 三阶段提交 强一致性方案"},"children":[{"data":{"id":"bvh2wihl21s0","created":1562914363288,"text":"Try（尝试）阶段"},"children":[{"data":{"id":"bvh2x80o6eg0","created":1562914418862,"text":"对各个服务的资源做检测以及对资源进行锁定或者预留。"},"children":[]}]},{"data":{"id":"bvh2wmvxiog0","created":1562914372863,"text":"Confirm（确认/提交）阶段"},"children":[{"data":{"id":"bvh2xb3zggw0","created":1562914425593,"text":"在各个服务中执行实际的操作。"},"children":[]}]},{"data":{"id":"bvh2wrdm2xs0","created":1562914382639,"text":"Cancel（回滚）阶段"},"children":[{"data":{"id":"bvh2xew8wps0","created":1562914433832,"text":"如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作。"},"children":[]}]}]}]}]},{"data":{"id":"bvg9v2c9dgg0","created":1562832437586,"text":"分布式缓存"},"children":[{"data":{"id":"bvg9v7t2ob40","created":1562832449487,"text":"缓存穿透"},"children":[]},{"data":{"id":"bvg9vat2bx40","created":1562832456017,"text":"缓存预热"},"children":[]},{"data":{"id":"bvg9ve9xgqg0","created":1562832463567,"text":"缓存更新"},"children":[]},{"data":{"id":"bvg9vgnzkeo0","created":1562832468770,"text":"缓存预热"},"children":[]},{"data":{"id":"bvg9vkj6cg80","created":1562832477187,"text":"缓存降级"},"children":[]}]},{"data":{"id":"bvg9u860cw00","created":1562832371905,"text":"一致性Hash"},"children":[]},{"data":{"id":"bvg9wfw22xk0","created":1562832545446,"text":"分布式锁"},"children":[{"data":{"id":"bvg9wiwjpgo0","created":1562832552006,"text":"Redis"},"children":[{"data":{"id":"bvg9wlih7hk0","created":1562832557685,"text":"SetNX"},"children":[]},{"data":{"id":"bvg9wlyo0w00","created":1562832558664,"text":"Redission"},"children":[]}]},{"data":{"id":"bvg9wsxrbb40","created":1562832573847,"text":"Zookeeper"},"children":[]}]},{"data":{"id":"bvh3dy88fkw0","created":1562915729742,"text":"分布式会话"},"children":[]},{"data":{"id":"bvh30sbv72w0","created":1562914698167,"text":"分布式消息系统"},"children":[]},{"data":{"id":"bvh30zyy87k0","created":1562914714823,"text":"分布式搜索系统"},"children":[]},{"data":{"id":"bw85muahug00","created":1565664187499,"text":"分布式ID"},"children":[]}]},{"data":{"id":"bvdrua3q4a80","created":1562578476229,"text":"Spring","layout":null},"children":[{"data":{"id":"bved26lpxbc0","created":1562638338831,"text":"SpringIOC"},"children":[{"data":{"id":"bved3rn0l6g0","created":1562638462986,"text":"Bean加载"},"children":[]},{"data":{"id":"bvej3sxqqh40","created":1562655392472,"text":"Bean的生命周期"},"children":[]},{"data":{"id":"bvg9ah249u00","created":1562830823977,"text":"Bean的作用域"},"children":[{"data":{"id":"bvg9aq32olc0","created":1562830843626,"text":"singleton"},"children":[]},{"data":{"id":"bvg9aqfg4s00","created":1562830844374,"text":"prototype"},"children":[]},{"data":{"id":"bvg9aqisv9c0","created":1562830844577,"text":"request"},"children":[]},{"data":{"id":"bvg9aqovn7c0","created":1562830844945,"text":"session"},"children":[]},{"data":{"id":"bvg9aqxgvew0","created":1562830845464,"text":"global session"},"children":[]}]},{"data":{"id":"bvej3t8eu6g0","created":1562655393116,"text":"循环依赖问题"},"children":[{"data":{"id":"bvej40wc5jk0","created":1562655409800,"text":"三层缓存"},"children":[]}]}]},{"data":{"id":"bvecl2617nk0","created":1562636996984,"text":"SpringAOP"},"children":[{"data":{"id":"bvg9bvpea3k0","created":1562830934224,"text":"JDK Proxy"},"children":[{"data":{"id":"bvg9c94tnns0","created":1562830963455,"text":"必须有接口"},"children":[]},{"data":{"id":"c2ebz9d1uoo0","created":1588228397715,"text":"JDK动态代理原理：Proxy类，调用其newProxyInstance方法，使用ASM字节码操作类库，直接生成一个实现了相应基础接口的代理类实例。其中的ASM实现简要过程是①使用ASM方法和指定参数生成对应的类（这个ASM类封装了对字节码的直接操作，不用自己手动使用JVM指令写class字节码文件），然后输出为byte数组②使用defineClass执行类加载并返回实例。"},"children":[]}]},{"data":{"id":"bvg9bvzdmy00","created":1562830934828,"text":"CGLib"},"children":[{"data":{"id":"bvg9cgn5rwo0","created":1562830979801,"text":"生成子类"},"children":[]}]}]},{"data":{"id":"bvecbs94rvs0","created":1562636270127,"text":"Spring事务"},"children":[{"data":{"id":"bvecd0gcefk0","created":1562636366341,"text":"事务特性ACID"},"children":[{"data":{"id":"bvecddx1biw0","created":1562636395649,"text":"原子性(Atomicity)"},"children":[]},{"data":{"id":"bvecdf4ml2w0","created":1562636398284,"text":"一致性(Consistency)"},"children":[]},{"data":{"id":"bvecderpgm80","created":1562636397503,"text":"隔离性(Isolation)"},"children":[]},{"data":{"id":"bvecdeyhzts0","created":1562636397914,"text":"持久性(Durability)"},"children":[]}]},{"data":{"id":"bvecd06bfo00","created":1562636365735,"text":"传播行为  PROPAGATION_"},"children":[{"data":{"id":"bvecf2be3oo0","created":1562636527123,"text":"REQUIRED"},"children":[]},{"data":{"id":"bvecfra44zk0","created":1562636581466,"text":"SUPPORTS"},"children":[]},{"data":{"id":"bvecfrk0hbs0","created":1562636582064,"text":"MANDATORY"},"children":[]},{"data":{"id":"bvecf2qgku00","created":1562636528035,"text":"REQUIRES_NEW"},"children":[]},{"data":{"id":"bvecf2x4vvk0","created":1562636528438,"text":"NOT_SUPPORTED"},"children":[]},{"data":{"id":"bvecf32qtn40","created":1562636528777,"text":"NEVER"},"children":[]},{"data":{"id":"bvecf37afvk0","created":1562636529052,"text":"NESTED"},"children":[]}]},{"data":{"id":"bvecczkwv400","created":1562636364441,"text":"隔离级别"},"children":[{"data":{"id":"bveceq7t1uo0","created":1562636500785,"text":"DEFAULT"},"children":[]},{"data":{"id":"bveciwvrxq00","created":1562636828752,"text":"Read uncommited"},"children":[]},{"data":{"id":"bveciwzlz2g0","created":1562636828984,"text":"Read commited"},"children":[]},{"data":{"id":"bvecix2tt340","created":1562636829178,"text":"Repeatable read"},"children":[]},{"data":{"id":"bvecix5hm740","created":1562636829339,"text":"Serializable"},"children":[]}]},{"data":{"id":"bveclokaigo0","created":1562637045736,"text":"问题"},"children":[{"data":{"id":"bveclu6u6680","created":1562637057983,"text":"同一类内方法调用事务失效"},"children":[{"data":{"id":"bvecm6ldwr40","created":1562637084984,"text":"类内调用没有走代理，无法AOP增强事务，参考https://blog.csdn.net/dapinxiaohuo/article/details/52092447"},"children":[]}]}]}]},{"data":{"id":"bvg9cp3b1mg0","created":1562830998192,"text":"SpringMVC"},"children":[]}]},{"data":{"id":"bvdruaa3g7c0","created":1562578476614,"text":"ORM","layout":null},"children":[{"data":{"id":"bvdry8qdlzk0","created":1562578786701,"text":"Mybatis","layout":null},"children":[{"data":{"id":"bvg9d75q3co0","created":1562831037520,"text":"一级缓存SqlSession:同一个SqlSession会话"},"children":[{"data":{"id":"bvg9ddwk0bc0","created":1562831052203,"text":"数据结构为Map：<MapperID+offset+limit+sql+入参，用户信息>"},"children":[{"data":{"id":"bvg9eft00tc0","created":1562831134706,"text":"commit操作时将全部清空一级缓存区"},"children":[]}]}]},{"data":{"id":"bvg9d7hvvns0","created":1562831038255,"text":"二级缓存Mapper:同一个命名空间"},"children":[{"data":{"id":"bvg9fi20q0o0","created":1562831217969,"text":"数据结构为Map：<MapperID+offset+limit+Sql+入参>，有缺陷"},"children":[]}]},{"data":{"id":"bvgw6wy36y00","created":1562895430633,"text":"Executor 执行器"},"children":[{"data":{"id":"bvgw7cym3140","created":1562895465494,"text":"CachingExecutor"},"children":[]},{"data":{"id":"bvgw7g4y0ps0","created":1562895472407,"text":"BaseExecutor","expandState":"expand"},"children":[{"data":{"id":"bvgw7gyajkw0","created":1562895474181,"text":"SimpleExecutor"},"children":[]},{"data":{"id":"bvgw7kekxdc0","created":1562895481697,"text":"ReuseExecutor"},"children":[]},{"data":{"id":"bvgw7pdjy080","created":1562895492518,"text":"BatchExecutor"},"children":[]}]}]},{"data":{"id":"bzl6s7qzenk0","created":1577956184482,"text":"原理：接口层/核心处理层/基础支持层","expandState":"expand"},"children":[{"data":{"id":"bzlstxhdtls0","created":1578018383280,"text":"基础支持层"},"children":[{"data":{"id":"bzlsu87l2qo0","created":1578018406632,"text":"解析器模块：解析配置XML文件"},"children":[{"data":{"id":"bzlsuhr5tlk0","created":1578018427407,"text":"XPath/XPathParser"},"children":[]}]},{"data":{"id":"bzlsvf2ib7c0","created":1578018499927,"text":"反射工具箱：参数处理，结果映射等需大量反射操作"},"children":[{"data":{"id":"bzlsvx4wu940","created":1578018539254,"text":"Reflector:每个Reflector对应一个类，其中缓存的操作类的元信息，如Filed和Method，这两个都被同意封装成Invoker"},"children":[]},{"data":{"id":"bzltfd9s3jc0","created":1578020063296,"text":"TypeParameterResolver：当存在复杂的继承关系以及泛型定义时， TypeParameterResolver 可以帮助我们解析字段 、 方法参数或方法返回值的类型  "},"children":[]},{"data":{"id":"bzltmufnyco0","created":1578020649206,"text":"ObjectFactory：该接口提供了多个 create（）方法的重载，通过这些 create（）方法可以创建指定类型的对象  "},"children":[]},{"data":{"id":"bzltt07v7eo0","created":1578021131980,"text":"Property 工具集（处理属性表达式）：PropertyTokenizer 、Prope民yNamer 矛日 Prope此yCopier 。"},"children":[{"data":{"id":"bzlttwrka3k0","created":1578021202828,"text":"属性表达式如\n<result property=” orders [0] . i terns [0] . name” column=” iternl ” />"},"children":[]}]},{"data":{"id":"bzltufpaus80","created":1578021244051,"text":"MetaClass:通过 Reflector 和 PropertyTokenizer 组合使用， 实现了对复杂的属性表达式的解析，并实现了获取指定属性描述信息的功能, 最终对类级别的元信息进行封装和处理  "},"children":[]},{"data":{"id":"bzltx7ums3k0","created":1578021462051,"text":"ObjectWrapper:对象级别的元信息处理 "},"children":[]}]},{"data":{"id":"bzlu74bso1k0","created":1578022238023,"text":"类型转换"},"children":[{"data":{"id":"bzlu8qg1ih40","created":1578022364534,"text":"TypeHandler:完成单个Java类型与JDBC类型互转"},"children":[{"data":{"id":"bzlucyxn68w0","created":1578022696469,"text":"IntegerTypeHandler  "},"children":[]}]},{"data":{"id":"bzlucenglwg0","created":1578022652317,"text":"TypeHandlerRegistry:管理众多的 TypeHandler 接口实现 "},"children":[]},{"data":{"id":"bzlujfmjeu00","created":1578023202988,"text":"TypeAliasRegistry:别名注册和管理的功能  "},"children":[]}]},{"data":{"id":"bzlun2v9y680","created":1578023488674,"text":"日志模块（适配器模式）"},"children":[]},{"data":{"id":"bzlv9nyj2080","created":1578025258595,"text":"资源加载"},"children":[{"data":{"id":"bzmn4gdkszs0","created":1578103841347,"text":"ClassloaderWrapper  "},"children":[]},{"data":{"id":"bzmn8f0k5880","created":1578104151840,"text":"VFS:虚拟文件系统 （ Virtual File System ） ， 它用来查找指定路径下的资源。  "},"children":[]}]},{"data":{"id":"bzmnjavg38w0","created":1578105004830,"text":"DataSource(使用了工厂方法模式):"},"children":[{"data":{"id":"bzmnjn0pifs0","created":1578105031269,"text":"UnpooledDataSource  "},"children":[]},{"data":{"id":"bzmnjssekao0","created":1578105043828,"text":"PooledDataSource  "},"children":[{"data":{"id":"bzmnk4im2ew0","created":1578105069357,"text":"close（）方法时，并未关闭真正的数据连接，而是调用 PooledDataSource . pushConnection （）方法将\nPooledConnection 对象归还给连接池，供之后重用  "},"children":[]}]}]},{"data":{"id":"bzmnkdo178g0","created":1578105089276,"text":"Transaction(使用了工厂方法模式):"},"children":[{"data":{"id":"bzmnmwseyy00","created":1578105287628,"text":"JdbcTransactionFactory（Mybatis自带） "},"children":[]},{"data":{"id":"bzmnn7c4k9s0","created":1578105310588,"text":"ManagedTransaction（Mybatis自带）"},"children":[]},{"data":{"id":"bzmnnkru8140","created":1578105339836,"text":"SpringManagedTransaction（与Spring集成时容器提供） "},"children":[]}]},{"data":{"id":"bzmnol54aqg0","created":1578105419003,"text":"binding 模块 "},"children":[{"data":{"id":"bzmnsvqdq080","created":1578105755513,"text":"在需要执行某 SQL 语句时 ，会先调用 MapperRegistry.getMapper（）方法获取通过JDK动态代理实现了的 Mapper\n接口的代理对象  "},"children":[]},{"data":{"id":"bzmntpdb2qo0","created":1578105820026,"text":"MapperRegistry: 通过Mybatis初始化时的配置类Configuration.mapperRegistry获得"},"children":[]},{"data":{"id":"bzmnuzye5w00","created":1578105921433,"text":"MapperProxyFactory:负责创建Mapper接口的JDK代理对象  "},"children":[]},{"data":{"id":"bzmnw1xd6ko0","created":1578106004089,"text":"MapperProxy: "},"children":[]},{"data":{"id":"bzmnwj4tqy00","created":1578106041545,"text":"MapperMethod:此对象中封装了Mapper 接口中对应方法的信息，以及对应 SQL 语句的信息。其中最核心的方法是 execute（）方法，它会根据 SQL 语句的类型调用 SqISession 对应的方法完成数据\n库操作。  "},"children":[]}]},{"data":{"id":"bzmo174venc0","created":1578106407247,"text":"Cache接口缓存模块（装饰器模式）："},"children":[{"data":{"id":"bznvh9gg82w0","created":1578228973854,"text":"本体类PerpetualCache:扮演着ConcreteComponent的角色，底层使用HashMap记录缓存项  "},"children":[]},{"data":{"id":"bznvipyocxs0","created":1578229088148,"text":"其他Cache接口实现都是装饰类，扮演着ConcreteDecorator 的角色，如BlockingCache/FifoCache&LruCache/SoftCache&WeakCache/ScheduledCache&LoggingCache&Synchronized&CacheSerializedCache  "},"children":[]},{"data":{"id":"bznvne6mtcg0","created":1578229454329,"text":"CacheKey "},"children":[]}]}]},{"data":{"id":"bzob6weobu80","created":1578273299565,"text":"核心处理层","expandState":"expand"},"children":[{"data":{"id":"bzobamzhe740","created":1578273592512,"text":"Mybatis初始化（建造者模式）","expandState":"expand"},"children":[{"data":{"id":"bzobf8jk8io0","created":1578273952895,"text":"BaseBuilder"},"children":[]},{"data":{"id":"bzobfgk4bk80","created":1578273970343,"text":"XMLConfigBuilder:加载解析mybatis-config.xml 文件中各个结点标签 "},"children":[]},{"data":{"id":"bzochrpu1gw0","created":1578276972472,"text":"XMLMapperBuilder(XMLConfigBuilder.mapperElement解析mapper标签后由XMLMapperBuilder解析对应的xml文件并加载对应的Mapper接口）:"},"children":[]},{"data":{"id":"bzoctscwsc00","created":1578277914237,"text":"XMLStatementBuilder(SQL标签节点解析): "},"children":[{"data":{"id":"bzocwm7w66w0","created":1578278135965,"text":"MappedStatement 存储配置文件中的sql标签及数据 "},"children":[]},{"data":{"id":"bzocupwq7xc0","created":1578277987269,"text":"SqISource接口返回可执行的sql标签数据"},"children":[]}]}]},{"data":{"id":"bzod6rwifcg0","created":1578278931979,"text":"Executor(模板方法模式): "},"children":[{"data":{"id":"bzodajr55400","created":1578279227697,"text":"SimpleExecutor(有一级缓存，该缓存由CacheKey确定)"},"children":[{"data":{"id":"bzodar1i30w0","created":1578279243561,"text":"由 MappedStatement 的 id、对应的 offset 和 limit、 SQL语句（包含“？”占位符）、用户传递的实参以及 Environment 的 id 这五部分构成 。  "},"children":[]}]},{"data":{"id":"bzoded4yjfk0","created":1578279526752,"text":"CachingExecutor(有二级缓存) "},"children":[]}]}]},{"data":{"id":"bzodhvdwn280","created":1578279801567,"text":"接口层SqISession(工厂方法模式，数据库相关操作，都是通过调用Executor接口完成)"},"children":[{"data":{"id":"bzodlhbsl7k0","created":1578280084421,"text":"DefaultSqlSessionFactory  "},"children":[]},{"data":{"id":"bzodlqn25s80","created":1578280104694,"text":"SqlSessionManager  "},"children":[]}]},{"data":{"id":"bzodms8td1s0","created":1578280186550,"text":"高级定制"},"children":[{"data":{"id":"bzodn0rm0m00","created":1578280205101,"text":"插件"},"children":[{"data":{"id":"bzodo3utcvk0","created":1578280290189,"text":"Interceptor拦截器（责任链模式）:继承 Interceptor 接口，使用＠Intercepts和＠Signature 两个注解进行标识  "},"children":[]},{"data":{"id":"bzoe73t5ops0","created":1578281779008,"text":"国产分页拦截器PageHelper  "},"children":[]}]},{"data":{"id":"bzoecfxt6n40","created":1578282197231,"text":"与Spring集成"},"children":[{"data":{"id":"bzq24yxb2s80","created":1578450878247,"text":"SqlSessionFactoryBean"},"children":[]}]}]}]}]},{"data":{"id":"bvdrycc6ew00","created":1562578794550,"text":"Hibernate","layout":null},"children":[]}]},{"data":{"id":"bvdruad90a00","created":1562578476805,"text":"SpringBoot","layout":null},"children":[]},{"data":{"id":"bvdruajmw2o0","created":1562578477191,"text":"Shiro","layout":null},"children":[]},{"data":{"id":"bvdse65ncr40","created":1562580034921,"text":"Spring Security与Oath 2.0","layout":null},"children":[{"data":{"id":"bvecwxqevds0","created":1562637927703,"text":"Authorization认证授权"},"children":[]},{"data":{"id":"bvecwy2iegw0","created":1562637928434,"text":"Authentication权限校验"},"children":[]},{"data":{"id":"c0e76d7w4080","created":1580902532230,"text":"RBAC模型"},"children":[]}]},{"data":{"id":"bvdso8lqngw0","created":1562580823889,"text":"Swagger"},"children":[]},{"data":{"id":"bvdruagfgy00","created":1562578476997,"text":"SpringCloud","layout":null},"children":[{"data":{"id":"bvds4zj6fzc0","created":1562579315224,"text":"SpringCloudZuul与SpringCloudGateway","layout":null},"children":[{"data":{"id":"c0prezo23xk0","created":1582076789731,"text":"Zuul","expandState":"expand"},"children":[{"data":{"id":"c0prb3585k00","created":1582076483843,"text":"Zuul是Netfix开源的微服务网关，使用的是Servlet模型，其核心是一系列过滤器，SpringCloud对其进行了整合和增强，目前Zuul使用默认Http客户端为ApacheHTTPClient，也可指定使用RestClient/OkHttpClient"},"children":[]},{"data":{"id":"c0prf3qnjo80","created":1582076798595,"text":"Zuul路由规则：http://ZUUL_HOST:ZUUL_PORT/注册中心上的serviceId/**  会被转发到serviceId对应的微服务，Zuul代理使用的是Ribbon来负载均衡"},"children":[]},{"data":{"id":"c0prhj0bj1s0","created":1582076988560,"text":"Zuul路由个性化配置：可通过修改配置文件完成"},"children":[]},{"data":{"id":"c0q6xxmj2vk0","created":1582120590853,"text":"Zuul的过滤器定义了四种类型，对应于请求的典型生命周期，可自定义过滤器或者禁用某过滤器"},"children":[{"data":{"id":"c0q6yodpwlc0","created":1582120649093,"text":"PRE(这种路由器在请求被路由前调用)：通常实现身份验证等"},"children":[]},{"data":{"id":"c0q6zvzitwg0","created":1582120744013,"text":"ROUTING(这种过滤器将请求路由到微服务)：常用Apache HttpClient或Ribbon请求"},"children":[]},{"data":{"id":"c0q71b603vc0","created":1582120855421,"text":"POST(这种过滤器在路由到微服务后执行)：常为响应添加标准HTTP Header等"},"children":[]},{"data":{"id":"c0q732l78d40","created":1582120993477,"text":"ERROR(在其他阶段发生错误时执行该过滤器)"},"children":[]},{"data":{"id":"c0q73kxnq5c0","created":1582121033413,"text":"还可创建自定义过滤器类型"},"children":[]}]},{"data":{"id":"c0q78jj9v800","created":1582121422187,"text":"在SpringCloud中，Zuul默认已整合了Hystrix实现了容错，也可以自己实现ZuulFallbackProvider接口为Zuul添加回退"},"children":[]}]},{"data":{"id":"c2cppuhmsc00","created":1588064035688,"text":"SpringCloudGateway使用Webflux中的reactor-netty响应式组件，底层采用了netty通讯框架"},"children":[]}]},{"data":{"id":"bvds507muls0","created":1562579316703,"text":"SpringCloudEureka/Nacos/Consul","layout":null},"children":[{"data":{"id":"c1h9hztsp7s0","created":1584869923979,"text":"Eureka"},"children":[{"data":{"id":"c1h9i6ecn280","created":1584869938283,"text":"Registe服务注册"},"children":[]},{"data":{"id":"c1h9ib9nbz40","created":1584869948882,"text":"Renew服务续约"},"children":[]},{"data":{"id":"c1h9igmfnvc0","created":1584869960539,"text":"Fetch Registries获取服务注册列表信息"},"children":[]},{"data":{"id":"c1h9in7wh2w0","created":1584869974898,"text":" Cancel服务下线"},"children":[]},{"data":{"id":"c1h9iqsi2cg0","created":1584869982674,"text":" Eviction服务剔除"},"children":[]}]}]},{"data":{"id":"c0oa6c2i1j40","created":1581926592623,"text":"RestTemplate"},"children":[{"data":{"id":"c0u8e3ybflc0","created":1582530919390,"text":"spring-web项目中的一个Rest客户端，本身没有负载均衡功能，其有拦截器功能。"},"children":[]}]},{"data":{"id":"bvds9ktq4xc0","created":1562579675031,"text":"SpringCloudRibbon：负载均衡组件主要维护集群服务信息和访问逻辑规则","layout":null},"children":[{"data":{"id":"c1h9o79j8k00","created":1584870410353,"text":"Ribbon可与RestTemplate使用，可以与Feign。可禁用Ribbon从EurekaClient处获取列表，而使用自定义列表：ribbon.eureka.enable=false  ribbon.listOfServers=www.baidu.com,www.douban.com"},"children":[]},{"data":{"id":"bzwxhwfm1qw0","created":1579148705699,"text":"SpringCloud对Ribbon进行了封装，可直接使用Spring的LoadBalancerClient接口这个API操作。此外Spring的封装RestTemplate加上@LoadBalanced注解API可实现同样效果（原理是Spring启动时会为这些被注解修饰过的RestTemplate添加拦截器，而拦截器中使用了LoadBalabcerClient来处理请求）。"},"children":[]},{"data":{"id":"bzwxv4wtos00","created":1579149742888,"text":"Ribbon原理：LoadBalancer调用IRule的choose方法","expandState":"expand"},"children":[{"data":{"id":"bzwx617axwg0","created":1579147775710,"text":"Rule：具体的访问规则，可自定义实现IRule接口，当然系统也提供了一些默认实现。"},"children":[{"data":{"id":"bzwxbl2b69s0","created":1579148210765,"text":"RoundRobinRule:默认规则，简单轮询服务列表"},"children":[]},{"data":{"id":"bzwxdcc7uvs0","created":1579148348501,"text":"RandomRule:随机选择"},"children":[]},{"data":{"id":"bzwxdo36krk0","created":1579148374076,"text":"RetryRule:含有重试选择逻辑，如果选择的服务器无法连接，则重新选择"},"children":[]}]},{"data":{"id":"bzwx67hk4hs0","created":1579147789391,"text":"Ping：使用定时器定时去Ping服务器判断是否存活，确保网络可连接。也可自定义实现IPing接口。"},"children":[]},{"data":{"id":"bzwx6q160880","created":1579147829759,"text":"ServerList：服务器列表，可静态配置也可动态刷新"},"children":[]}]}]},{"data":{"id":"bvds50jyo880","created":1562579317448,"text":"SpringCloudFeign/SpringCloudOpenFeign","layout":null},"children":[{"data":{"id":"c0oa9xfioq00","created":1581926874215,"text":"Feign是声明式和模板化的Http客户端，SpringCloud对Feign进行了增强，openfeign 是 spring cloud 在 feign 的基础上支持 spring mvc 注解，使其支持SpringMVC并整合了Ribbon和Eureka。Feign实际上会为接口使用JDK动态代理生成代理类，然后交给feign.Client接口发送请求，最终会使用HttpURLConnetion发送请求"},"children":[]},{"data":{"id":"c0oasewvxnk0","created":1581928322826,"text":"手动创建Feign"},"children":[{"data":{"id":"c0oaun4p7y80","created":1581928497441,"text":"Feign Builder API手动创建"},"children":[]}]},{"data":{"id":"c0oac09rli00","created":1581927037126,"text":"自定义Feign配置"},"children":[{"data":{"id":"c0oac5mhykg0","created":1581927048780,"text":"在SpringCloud中默认契约为SpringMvcContract，可通过配置@FeignClient的configuration属性自定义配置，自定义优先级高于默认"},"children":[]}]},{"data":{"id":"c0oamtrarag0","created":1581927884955,"text":"自定义Feign编码器/解码器/日志打印/拦截器"},"children":[]}]},{"data":{"id":"bvds7oxidko0","created":1562579527239,"text":"SpringCloudhHystrix","layout":null},"children":[{"data":{"id":"c0p79i1aeww0","created":1582019937330,"text":"Hystrix是实现了超时机制和断路器模式的工具类库"},"children":[{"data":{"id":"c0p7aooa5aw0","created":1582020030145,"text":"请求包裹：使用HystrixCommand包裹对依赖的调用逻辑，每个命令在独立线程中执行，使用了命令模式"},"children":[]},{"data":{"id":"c0p7bn4e5r40","created":1582020105130,"text":"跳闸机制/自我修复：当服务错误率达一定阈值时，Hystrix可自动或手动跳闸，停止请求该服务一段时间。一段时间后会进入半开状态。"},"children":[]},{"data":{"id":"c0p7cdd2c3s0","created":1582020162251,"text":"线程池：Hystrix为每个依赖维护了一个线程池，如请求数已满，则对该依赖的请求就立即拒绝而不是等候，即快速失败。"},"children":[]},{"data":{"id":"c0p7di6xwcw0","created":1582020251129,"text":"监控：Hystrix可近实时监控运行指标，如成功/失败/超时/拒绝等"},"children":[{"data":{"id":"c0p7sqgl3og0","created":1582021444589,"text":"引入Hystrix-metrics-event-stream可将监控指标暴露给外部系统，配合HystrixDashboard实现可视化监控"},"children":[]}]},{"data":{"id":"c0p7e5y5sh40","created":1582020302841,"text":"回退机制：当请求失败/超时/被拒绝或断路器开启时，可人工配制回退逻辑代码（执行回退逻辑不代表断路器已打开，请求失败/超时等也会执行回退逻辑）"},"children":[]}]},{"data":{"id":"c0p7imoe1dc0","created":1582020652712,"text":"线程隔离策略与传播上下文：","expandState":"expand"},"children":[{"data":{"id":"c0p7muhwlsg0","created":1582020983191,"text":"Hystrix隔离策略有两种，默认线程隔离","expandState":"expand"},"children":[{"data":{"id":"c0p7j98ssbs0","created":1582020701835,"text":"线程隔离：Hystrix将会在单独线程上执行，并发请求受线程池中线程数量限制"},"children":[]},{"data":{"id":"c0p7k1ikfwo0","created":1582020763376,"text":"信号量隔离：HystrixCommand将会在调用线程上执行，并发请求数量受信号量个数限制"},"children":[]}]},{"data":{"id":"c0p7n1b2qvk0","created":1582020998015,"text":"如果想传播线程本地上下文到@HystrixCommand中，默认声明将不会工作，因为它会在线程池中执行命令"},"children":[]}]},{"data":{"id":"c0p7odhuck00","created":1582021102910,"text":"SpringCloud默认已为Feign整合了Hystrix，只需要引入Hystrix依赖并配置@FeignClient的fallback属性并在启动了类开启@EnableCircuitBreaker即可"},"children":[{"data":{"id":"c0p7pjicxo80","created":1582021194366,"text":"fallbackFactory类需实现FallbackFactory接口并覆写create方法"},"children":[]},{"data":{"id":"c0p7qpcjh1c0","created":1582021285439,"text":"禁用可在配置文件中全局配置或者配置@FeignClient的configuration属性为FeignDisableHystrixConfiguration.class"},"children":[]}]}]},{"data":{"id":"c2cpzewvgug0","created":1588064785423,"text":"SpringCloudAlibaba"},"children":[{"data":{"id":"c2cpzm85syo0","created":1588064801343,"text":"SpringCloudAlibabaSentinel"},"children":[]},{"data":{"id":"c2cpzxf1c8g0","created":1588064825703,"text":"SpringCloudAlibabaSeata"},"children":[]}]},{"data":{"id":"bvds50db1y80","created":1562579317046,"text":"SpringCloudConfig","layout":null},"children":[]},{"data":{"id":"bvds50guydc0","created":1562579317261,"text":"NacosSpringCloud","layout":null},"children":[]},{"data":{"id":"bvds7p0ymjs0","created":1562579527447,"text":"SpringCloudBus","layout":null},"children":[]},{"data":{"id":"bvds93w26zs0","created":1562579638167,"text":"SpringCloudSleuth","layout":null},"children":[]},{"data":{"id":"bzwx3lh2knc0","created":1579147584744,"text":"SpringBootActuator"},"children":[{"data":{"id":"bzwx3t907rc0","created":1579147601671,"text":"引入后会暴露一些endpoints指标，来用于系统监控，可自定义HealthIndicator实现监控指标"},"children":[]}]}]},{"data":{"id":"bvdruamrwdc0","created":1562578477380,"text":"Redis","layout":null},"children":[{"data":{"id":"bvg1lwd84gw0","created":1562809150427,"text":"通讯协议"},"children":[{"data":{"id":"bvg1lywxv7s0","created":1562809155973,"text":"RESP:文本协议"},"children":[]}]},{"data":{"id":"bvg9i4dqvb40","created":1562831423296,"text":"数据结构"},"children":[{"data":{"id":"bvg9i6xyzew0","created":1562831428873,"text":"String"},"children":[{"data":{"id":"bzw8k0g4go00","created":1579078343418,"text":"内部使用redisObject+sdshdr方式存储，其中sdshdr负责存储真正数据，内部有char[]数据。特别的，当字符串为数字类型且小于1000时，多个key共享这个已经建立好的共享对象。"},"children":[]}]},{"data":{"id":"bvg9i803z1k0","created":1562831431178,"text":"List"},"children":[{"data":{"id":"bzw8oujf6cw0","created":1579078722377,"text":"内部使用双向链表的redisObject存储"},"children":[]}]},{"data":{"id":"bvg9i9ato3k0","created":1562831434003,"text":"Hash"},"children":[]},{"data":{"id":"bvg9i9s553k0","created":1562831435050,"text":"Set"},"children":[]},{"data":{"id":"bvg9ia8z6ao0","created":1562831436068,"text":"ZSet"},"children":[{"data":{"id":"bzw8rc23lfk0","created":1579078917240,"text":"内部使用散列表和跳表两种数据结构存储，散列表存映射，跳表实现排序，元素值为redisObject，分数值为double类型"},"children":[]}]}]},{"data":{"id":"bzw29a6xzs80","created":1579060575965,"text":"数据排序"},"children":[{"data":{"id":"bzw2au3l7000","created":1579060697662,"text":"ZSet结构使用这几个命令组合：MULT/ZINTERASOTE/ZRANGE/DEL/EXEC"},"children":[]},{"data":{"id":"bzw2d5mqvy00","created":1579060879493,"text":"SORT命令（其中对ZSet结构排序时忽略分数值，只对键排序）：SORT  list/set/zset  或者 SORT list/set/zset DESC 或者 SORT list/set/zset DESC LIMIT  offset count"},"children":[]},{"data":{"id":"bzw7jb1dg280","created":1579075467027,"text":"SORT BY命令可对字符串或者散列类型键的某个字段进行排序（表示为键名->字段名），如果SORT命令提供了BY参数，则会对每个元素使用元素的值替换参考键中的第一个“*”号并获取其值然后依据该值对元素排序"},"children":[]},{"data":{"id":"bzw7tgfnv1s0","created":1579076262386,"text":"SORT BY GET命令：GET参数不影响参数，作用是使SORT命令返回结果不是元素自身的值，而是GET参数中指定的键值。GET参数支持字符串和散列类型，并使用“*”作为占位符。特别的，GET #会返回元素本身的值。"},"children":[]}]},{"data":{"id":"bzstz118aj40","created":1578732523638,"text":"数据安全与性能"},"children":[{"data":{"id":"bzstz6rdhoo0","created":1578732536102,"text":"持久化","expandState":"expand"},"children":[{"data":{"id":"bzstznybr600","created":1578732573528,"text":"快照持久化RDB"},"children":[]},{"data":{"id":"bzstzxdxep40","created":1578732594062,"text":"命令追加持久化AOF"},"children":[]}]},{"data":{"id":"bzstzccd8ow0","created":1578732548256,"text":"复制"},"children":[]},{"data":{"id":"bzw9mftfzrs0","created":1579081354713,"text":"哨兵"},"children":[]},{"data":{"id":"bzstzeb3vq80","created":1578732552533,"text":"事物与非事物流水线"},"children":[{"data":{"id":"bzw1s7409w80","created":1579059237066,"text":"事物(队列实现，无回滚功能)："},"children":[{"data":{"id":"bzw1vw51g1c0","created":1579059526641,"text":"MULTI/EXEC"},"children":[]},{"data":{"id":"bzw1vx518hk0","created":1579059528817,"text":"WATCH/UNWATCH（监控一个或多个键，一旦其中一个被修改或删除，则之后的事物不会执行；正常情况需手动使用UNWATCH命令保证下一个事物不受影响）"},"children":[]}]},{"data":{"id":"bzw274e1qnc0","created":1579060406606,"text":"非事物：有些命令可接收多个参数，这样一次执行可减少使用事物时的资源消耗"},"children":[]}]},{"data":{"id":"bzw223yfaco0","created":1579060013840,"text":"内存管理","expandState":"expand"},"children":[{"data":{"id":"bzw227fawqw0","created":1579060021391,"text":"配置文件maxmemory参数可设置Redis最大可用内存大小（单位为字节），当超过这个限制时将根据maxmemory-policy指定策略来删除不需要的键直到Redis占用小于指定内存"},"children":[]},{"data":{"id":"bzw23x80ilc0","created":1579060155911,"text":"淘汰策略"},"children":[]}]}]}]},{"data":{"id":"bvdsabm2zw80","created":1562579733342,"text":"MongoDB","layout":null,"layout_right_offset":{"x":-7,"y":-52}},"children":[{"data":{"id":"bvqbi5qcl0g0","created":1563852668021,"text":"Robo3t"},"children":[]}]},{"data":{"id":"bvdruapszog0","created":1562578477564,"text":"RabbitMQ","layout":null},"children":[{"data":{"id":"bvg9j6qwl6w0","created":1562831506809,"text":"消息处理","expandState":"expand"},"children":[{"data":{"id":"bvejrb7kkfc0","created":1562657234623,"text":"幂等性"},"children":[{"data":{"id":"bvem1mba4gw0","created":1562663684653,"text":"https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651960002&idx=1&sn=c0775231bccf002c3178eabe43f1cdcb&chksm=bd2d071e8a5a8e08c3a5287247ea41dee6b2621e6ffafbf909ec1e8a866b7c816eeeea227246&scene=21#wechat_redirect"},"children":[]}]},{"data":{"id":"bvem1vy0ns00","created":1562663705619,"text":"可达性"},"children":[]}]},{"data":{"id":"bvg9jjkhvvc0","created":1562831534720,"text":"架构"},"children":[{"data":{"id":"bvg9k5kut1c0","created":1562831582631,"text":"Broker"},"children":[]},{"data":{"id":"bvg9jxqa5d40","created":1562831565544,"text":"Virtual Host"},"children":[]},{"data":{"id":"bvg9kgudn1k0","created":1562831607151,"text":"Exchange"},"children":[{"data":{"id":"bvg9m6ic2a80","created":1562831741383,"text":"类型"},"children":[{"data":{"id":"bvg9m8ujg2o0","created":1562831746475,"text":"direct"},"children":[]},{"data":{"id":"bvg9mce8ty80","created":1562831754197,"text":"fanout"},"children":[]},{"data":{"id":"bvg9me3oq200","created":1562831757912,"text":"topic"},"children":[]},{"data":{"id":"bvg9mjbmqf40","created":1562831769276,"text":"headers"},"children":[]}]}]},{"data":{"id":"bvg9kljsja80","created":1562831617395,"text":"Queue"},"children":[]},{"data":{"id":"bvg9koc1qlk0","created":1562831623457,"text":"Binding"},"children":[]},{"data":{"id":"bvg9l6hv3og0","created":1562831662991,"text":"Publisher"},"children":[{"data":{"id":"bvg9lakqtj40","created":1562831671872,"text":"Message"},"children":[]}]},{"data":{"id":"bvg9lpqheog0","created":1562831704871,"text":"Channel","expandState":"expand"},"children":[{"data":{"id":"bvg9ld7bp4g0","created":1562831677591,"text":"Connection"},"children":[]},{"data":{"id":"bvg9lywqlwo0","created":1562831724840,"text":"Consumer"},"children":[]}]}]}]},{"data":{"id":"bvdscw700l40","created":1562579934871,"text":"Kafka","layout":null},"children":[]},{"data":{"id":"bvdruat1qyo0","created":1562578477760,"text":"ELK","layout":null},"children":[{"data":{"id":"bvdsd4l1k1s0","created":1562579953134,"text":"ElasticSearch","layout":null},"children":[]},{"data":{"id":"bvdsdbjdb400","created":1562579968270,"text":"Logstash","layout":null},"children":[]},{"data":{"id":"bvdsdbpje0g0","created":1562579968643,"text":"Kibana","layout":null},"children":[]}]},{"data":{"id":"bvdrzspj1co0","created":1562578908550,"text":"XXL-Job","layout":null},"children":[]},{"data":{"id":"bvdruaw0ark0","created":1562578477939,"text":"Netty","layout":null},"children":[]},{"data":{"id":"bvdrznybu5c0","created":1562578898198,"text":"Nginx","layout":null},"children":[{"data":{"id":"bvebzeb0jp40","created":1562635299395,"text":"http://www.nginx.cn/doc/"},"children":[]}]},{"data":{"id":"bvdrzts5q5c0","created":1562578910886,"text":"Zookeeper","layout":null},"children":[]},{"data":{"id":"bvdrzuzaoo00","created":1562578913494,"text":"Docker","layout":null},"children":[{"data":{"id":"byjqovu9qls0","created":1574153067311,"text":"Docker Compose"},"children":[]},{"data":{"id":"byjqp28gi2o0","created":1574153081231,"text":"Harbor"},"children":[]}]},{"data":{"id":"bvds0a6mwi00","created":1562578946590,"text":"大数据","layout":null},"children":[{"data":{"id":"bvds0ikame00","created":1562578964830,"text":"Hadoop","layout":null},"children":[{"data":{"id":"c1v1gqfk3m00","created":1586269095677,"text":"MapReduce"},"children":[]},{"data":{"id":"c1v1gv0jhk80","created":1586269105653,"text":"HDFS"},"children":[]}]},{"data":{"id":"bvds0jn3f0g0","created":1562578967176,"text":"Yarn","layout":null},"children":[]},{"data":{"id":"bvds0k20p5c0","created":1562578968078,"text":"HBase","layout":null},"children":[]},{"data":{"id":"bvds20hr6mg0","created":1562579082222,"text":"Hive","layout":null},"children":[]},{"data":{"id":"bvds0k5buzk0","created":1562578968278,"text":"Flink","layout":null},"children":[{"data":{"id":"bym7wsnfoo00","created":1574404766063,"text":"Source/Transformation/Sink"},"children":[]}]},{"data":{"id":"bvds0k8b5ts0","created":1562578968459,"text":"Storm","layout":null},"children":[]},{"data":{"id":"bvds0jw5wxc0","created":1562578967724,"text":"Spark","layout":null},"children":[{"data":{"id":"c1v1h1mjm9s0","created":1586269120044,"text":"RDD"},"children":[]},{"data":{"id":"c252nc0fd9c0","created":1587288033513,"text":"Spark SQL"},"children":[]},{"data":{"id":"c252nmb9h080","created":1587288055936,"text":"Spark Streaming"},"children":[]},{"data":{"id":"c252nqkldhc0","created":1587288065207,"text":"Spark MLlib"},"children":[]}]}]},{"data":{"id":"bvds25bq3y80","created":1562579092742,"text":"Maven","layout":null},"children":[]},{"data":{"id":"bvds263lj8g0","created":1562579094427,"text":"Git与SVN","layout":null},"children":[{"data":{"id":"c28h3h8bxh40","created":1587633474110,"text":"Git"},"children":[{"data":{"id":"c28h46uhmy80","created":1587633529870,"text":"git init"},"children":[]},{"data":{"id":"c28h3jjoouw0","created":1587633479150,"text":"git clone"},"children":[]},{"data":{"id":"c28h3nb16dk0","created":1587633487334,"text":"git pull"},"children":[]},{"data":{"id":"c28h4d4lzog0","created":1587633543542,"text":"git add a1.java"},"children":[]},{"data":{"id":"c28h3qvi5pk0","created":1587633495102,"text":"git commit -m \"评论\""},"children":[]},{"data":{"id":"c28h3up8hw80","created":1587633503430,"text":"git config --global user.name 'xxx' / git config --global user.email 'xxx'"},"children":[]}]}]},{"data":{"id":"bvds26enc7s0","created":1562579095095,"text":"Linux","layout":null},"children":[]},{"data":{"id":"c19b7sw3s140","created":1584062287806,"text":"Java性能优化"},"children":[{"data":{"id":"c19b7wz2ofc0","created":1584062296693,"text":"系统性能瓶颈"},"children":[{"data":{"id":"c19b85d8c8g0","created":1584062314963,"text":"CPU/内存/磁盘IO/网络/数据库/锁竞争/"},"children":[]}]},{"data":{"id":"c19b90tnmls0","created":1584062383436,"text":"性能衡量标准"},"children":[{"data":{"id":"c19b95zyexc0","created":1584062394701,"text":"响应时间/启动时间/执行时间/执行速度/计算资源分配/内存分配/磁盘吞吐量/网络吞吐量"},"children":[]}]},{"data":{"id":"c19bih38vq00","created":1584063124122,"text":"性能优化策略"},"children":[{"data":{"id":"c19bjc0fza00","created":1584063191433,"text":"空间换时间/时间换空间/并行处理/"},"children":[]}]}]},{"data":{"id":"bvds318eoio0","created":1562579162198,"text":"常见业务解决方案","layout":null},"children":[{"data":{"id":"bvf9nawqcxc0","created":1562730269368,"text":"国内电商"},"children":[{"data":{"id":"bvf8qvy3sgg0","created":1562727729146,"text":"电商分类"},"children":[{"data":{"id":"bvf8r032ep40","created":1562727738154,"text":"B2C"},"children":[{"data":{"id":"bvf8rgkksk00","created":1562727774041,"text":"Business to Consumer/企业与消费者之间的电子商务/商业零售:类似京东、天猫等都是典型的B2C商城"},"children":[]}]},{"data":{"id":"bvf8r0et4q00","created":1562727738864,"text":"B2B"},"children":[{"data":{"id":"bvf8ru5lr2g0","created":1562727803610,"text":"Business to Business/企业与企业之间的电子商务:供应方（Business）与采购方（Business）之间通过运营者（Operator）达成产 \n品或服务交易的一种电子商务模式。类似阿里巴巴（1688）是典型的B2B商城。 "},"children":[]}]},{"data":{"id":"bvf8r0jfvds0","created":1562727739144,"text":"C2C"},"children":[{"data":{"id":"bvf8t7gzmuw0","created":1562727910961,"text":"Consumer to Consumer/消费者与消费者之间的电子商务:淘宝网、微店等都是典型的C2C商城。 "},"children":[]}]},{"data":{"id":"bvf8r0llteo0","created":1562727739275,"text":"C2M"},"children":[{"data":{"id":"bvf8twlat5s0","created":1562727965641,"text":"Customer to Manufactory/客户与工厂直接对接:即定制 \n化生产消费"},"children":[]}]},{"data":{"id":"bvf8r0srosg0","created":1562727739708,"text":"O2O"},"children":[{"data":{"id":"bvf9076bnjc0","created":1562728458865,"text":"Online to Offline:一般是指线上到线下，通过互联网连接本地生活服务，解决日常生活中的衣食住行等需求。O2O平台在线上提 \n供生活服务信息，从线上获取信息、购买，到线下享受服务，再到线上 \n评价完成消费的闭环"},"children":[]}]}]},{"data":{"id":"bvf9nm7twrs0","created":1562730293984,"text":"系统功能"},"children":[{"data":{"id":"bvf9nqstjdc0","created":1562730303960,"text":"商品中心"},"children":[{"data":{"id":"bvf9ord9p3c0","created":1562730383561,"text":"商品基本概念"},"children":[{"data":{"id":"bvf9oy1favk0","created":1562730398082,"text":"SKU"},"children":[{"data":{"id":"bvfcjgkqrqg0","created":1562738431577,"text":"即库存量单位，例如“iPhone 7 Plus 128G银色”就是一个SKU"},"children":[]}]},{"data":{"id":"bvf9oycuqig0","created":1562730398773,"text":"SPU"},"children":[{"data":{"id":"bvfcjsq9ns00","created":1562738458033,"text":"即标准化产品单元，是一组标准化信息的集合，例如“iPhone 7 Plus”就是一个SPU"},"children":[]}]},{"data":{"id":"bvf9oyzuy6g0","created":1562730400164,"text":"类目"},"children":[]},{"data":{"id":"bvf9ozc7zkg0","created":1562730400912,"text":"属性"},"children":[]},{"data":{"id":"bvfcnvjbt5s0","created":1562738777600,"text":"区别与联系","expandState":"expand"},"children":[{"data":{"id":"bvfcnypjkiw0","created":1562738784506,"text":"类目>SPU>SKU"},"children":[]},{"data":{"id":"bvfco456htc0","created":1562738796336,"text":"分类：手机\nSPU：苹果6\nSKU：土豪金 苹果6"},"children":[]},{"data":{"id":"bvfcoilqctc0","created":1562738827811,"text":"SPU 是拿来给用户购买商品查询的;\n比如: iphone X;\nSKU 才是用户点击进来展示的 加上颜色,尺寸...等;\n比如: 土豪金 64G iphone X;\n用户一般查询商品只会输入查询的名称就是SPU;"},"children":[]}]}]},{"data":{"id":"bvf9ornx4740","created":1562730384205,"text":"商品类目和品牌"},"children":[]},{"data":{"id":"bvf9ost9dmw0","created":1562730386705,"text":"属性"},"children":[{"data":{"id":"bvfcwu21tt40","created":1562739479656,"text":"分组"},"children":[]},{"data":{"id":"bvfcwubqs0w0","created":1562739480242,"text":"继承"},"children":[]}]}]},{"data":{"id":"bvfd6zqkkfk0","created":1562740275664,"text":"促销系统"},"children":[{"data":{"id":"bvgbvt83xdk0","created":1562838138328,"text":"促销形式"},"children":[{"data":{"id":"bvgbvxlqmio0","created":1562838147859,"text":"7种：满减促销、单品促销、套装促销、赠品促销、满赠促销、多买优惠 \n促销、定金促销。"},"children":[]},{"data":{"id":"bvgbys0at480","created":1562838370772,"text":"优惠券和拼团"},"children":[]}]},{"data":{"id":"bvgbzztj9rs0","created":1562838466141,"text":"活动设置"},"children":[{"data":{"id":"bvgc01yipiw0","created":1562838470796,"text":"基础设置"},"children":[{"data":{"id":"bvgc0fhoq8g0","created":1562838500253,"text":"包括活动名称、促销编码、促销时间、推 \n广平台、促销渠道、促销用户范围、推广链接等内容"},"children":[]}]},{"data":{"id":"bvgc02j0zj40","created":1562838472036,"text":"促销规则"},"children":[]},{"data":{"id":"bvgc03bdl8g0","created":1562838473750,"text":"活动商品"},"children":[]}]},{"data":{"id":"bvgc2cimi4w0","created":1562838650508,"text":"优惠券管理"},"children":[{"data":{"id":"bvgc2pk2vn40","created":1562838678894,"text":"生命周期"},"children":[{"data":{"id":"bvgc2rf42zk0","created":1562838682947,"text":"制券、发券、使用、统计等"},"children":[]}]}]},{"data":{"id":"bvgc32qi86o0","created":1562838707581,"text":"拼团"},"children":[{"data":{"id":"bvgc3fleujk0","created":1562838735571,"text":"类型","expandState":"expand"},"children":[{"data":{"id":"bvgc3i0hnbk0","created":1562838740836,"text":"新人团、普通团、超级团"},"children":[]}]},{"data":{"id":"bvgc3s6fnuw0","created":1562838762963,"text":"流程"},"children":[]}]}]},{"data":{"id":"bvgc4bdmavk0","created":1562838804757,"text":"内容管理CMS"},"children":[]},{"data":{"id":"bvgcmmppyzk0","created":1562840239988,"text":"库存管理"},"children":[{"data":{"id":"bvgcnaszy400","created":1562840292429,"text":"分层"},"children":[{"data":{"id":"bvgcndcpkm00","created":1562840297974,"text":"销售层、"},"children":[]},{"data":{"id":"bvgcndrz67s0","created":1562840298898,"text":"调度层、"},"children":[]},{"data":{"id":"bvgcne0z1kw0","created":1562840299442,"text":"仓库层"},"children":[]}]},{"data":{"id":"bvgcozpssug0","created":1562840425019,"text":"库存同步"},"children":[{"data":{"id":"bvgcp3klabs0","created":1562840433412,"text":"自上而下"},"children":[{"data":{"id":"bvgcpc6lk6o0","created":1562840452156,"text":"用户下单后，首先会生成订单，扣减销售层的库 \n存；然后流转到调度层进行调度，生成发货通知单，调整调度层的库存；最后推送至仓库，WMS系统同步响应，扣减库存并进行出库。"},"children":[]}]},{"data":{"id":"bvgcp4ekua80","created":1562840435225,"text":"自下而上"},"children":[{"data":{"id":"bvgcpfheico0","created":1562840459340,"text":"仓库的实物入库可以算是从下到上引起的库存变 \n动。主要有三种单据：采购入库单、退货入库单、调拨入库单。实物入 \n库，会连锁引起仓库层、调度层、销售层的可用库存逐步增加。"},"children":[]}]}]}]},{"data":{"id":"bvgcs93ihko0","created":1562840680532,"text":"物理管理"},"children":[{"data":{"id":"bvgxmyyr7k00","created":1562899509964,"text":"类型"},"children":[{"data":{"id":"bvgxn0tq9g80","created":1562899514013,"text":"普通快递、同城配送、门店 \n自提。"},"children":[]}]}]},{"data":{"id":"bvgxzumxav40","created":1562900519275,"text":"采购管理"},"children":[{"data":{"id":"bvgy7u32n9k0","created":1562901144988,"text":"采购流程"},"children":[]},{"data":{"id":"bvgy7vx6k1c0","created":1562901148986,"text":"供应商管理"},"children":[{"data":{"id":"bvgy88wa0h40","created":1562901177229,"text":"自采自卖"},"children":[]},{"data":{"id":"bvgy8myyq340","created":1562901207867,"text":"一件代发"},"children":[{"data":{"id":"bvgy8r5o3v40","created":1562901216979,"text":"如淘宝小店铺无力自备库存"},"children":[]}]},{"data":{"id":"bvgyddv1hoo0","created":1562901579859,"text":"多货主仓库模式"},"children":[{"data":{"id":"bvgydkm2yxc0","created":1562901594555,"text":"顺丰、菜鸟"},"children":[]}]}]}]},{"data":{"id":"bvgyjkq27340","created":1562902064981,"text":"仓库管理WMS"},"children":[]},{"data":{"id":"bvgyjo7c0hk0","created":1562902072555,"text":"订单管理"},"children":[{"data":{"id":"bvgylar7ny00","created":1562902200011,"text":"订单状态类型："},"children":[{"data":{"id":"bvgylkopduo0","created":1562902221627,"text":"（1）待付款"},"children":[]},{"data":{"id":"bvgym8q44ug0","created":1562902273955,"text":"（2）待发货"},"children":[]},{"data":{"id":"bvgymat4m8w0","created":1562902278491,"text":"（3）待收货"},"children":[]},{"data":{"id":"bvgymdos28g0","created":1562902284758,"text":"（4）交易成功"},"children":[]},{"data":{"id":"bvgymgjjr480","created":1562902290972,"text":"（5）已取消"},"children":[]},{"data":{"id":"bvgymivjqko0","created":1562902296051,"text":"（6）售后中"},"children":[{"data":{"id":"bvgymoujoi80","created":1562902309051,"text":"（1）待审核"},"children":[]},{"data":{"id":"bvgymr8o2bs0","created":1562902314259,"text":"（2）待退货入库"},"children":[]},{"data":{"id":"bvgymtsr1fs0","created":1562902319827,"text":"（3）待退款"},"children":[]},{"data":{"id":"bvgymxllkx40","created":1562902328101,"text":"（4）待换货入库"},"children":[]},{"data":{"id":"bvgyn030bo80","created":1562902333508,"text":"（5）换货出库中"},"children":[]},{"data":{"id":"bvgyn3wgzy00","created":1562902341820,"text":"（6）售后成功"},"children":[]}]},{"data":{"id":"bvgyml9pbag0","created":1562902301261,"text":"（7）交易关闭"},"children":[]}]}]}]}]},{"data":{"id":"c0u9772igdk0","created":1582533198734,"text":"跨境电商"},"children":[]},{"data":{"id":"c28h30bhw0g0","created":1587633437296,"text":"推荐系统"},"children":[]}]},{"data":{"id":"bvds2kcbs2o0","created":1562579125430,"text":"前端相关","layout":null},"children":[{"data":{"id":"bvds2p1ohcw0","created":1562579135670,"text":"LayUI","layout":null},"children":[]},{"data":{"id":"bvds2pdds7c0","created":1562579136378,"text":"EChars","layout":null},"children":[]},{"data":{"id":"bvds2pmi6io0","created":1562579136929,"text":"VUE","layout":null},"children":[]},{"data":{"id":"c0vbet329dc0","created":1582640997383,"text":"小程序"},"children":[{"data":{"id":"c0y9timbq3k0","created":1582941187715,"text":"Flex布局"},"children":[{"data":{"id":"c0y9ts3xbl40","created":1582941208371,"text":"flex-direction: 定义容器中所有组件的排列方向"},"children":[]},{"data":{"id":"c0y9vi6ozfc0","created":1582941343499,"text":"flex-wrap: 定义容器内组件在一条轴线排不下，如何换行"},"children":[]},{"data":{"id":"c0y9tzb4gw80","created":1582941224043,"text":"justify-content: 定义项目在主轴上的对齐方式"},"children":[]},{"data":{"id":"c0y9ujocnkw0","created":1582941268379,"text":"align-items: 定义项目在交叉轴上如何对齐"},"children":[]},{"data":{"id":"c0y9w0oc4qw0","created":1582941383747,"text":"order: 可以控制项目元素的排列顺序，默认为0"},"children":[]}]},{"data":{"id":"c16787h32c80","created":1583746355240,"text":"云开发"},"children":[{"data":{"id":"c167xuvh3880","created":1583748365280,"text":"配置","expandState":"expand"},"children":[{"data":{"id":"c167u3yywew0","created":1583748071626,"text":"配置app.js/配置project.config.json/新增cloudfunctions文件夹"},"children":[]}]},{"data":{"id":"c167xymjsq00","created":1583748373448,"text":"JSON 数据库"},"children":[{"data":{"id":"c167ym8qvog0","created":1583748424856,"text":"数据库中的每条记录都是一个 JSON 格式的对象。一个数据库可以有多个集合（相当于关系型数据中的表），集合可看做一个 JSON 数组，数组中的每个对象就是一条记录，记录的格式是 JSON 对象。"},"children":[]}]}]}]}]},{"data":{"id":"bvds45izq3k0","created":1562579249909,"text":"其他语言","layout":null},"children":[{"data":{"id":"bvds4g5qsu80","created":1562579273053,"text":"Python","layout":null},"children":[{"data":{"id":"bvqb1zioiu00","created":1563851400670,"text":"环境工具"},"children":[{"data":{"id":"bvqb22ri5ao0","created":1563851407734,"text":"PyCharm+Anaconda"},"children":[]},{"data":{"id":"bvrysvw4wb40","created":1564019954122,"text":"pip install package"},"children":[]}]},{"data":{"id":"bvryt2nu7q80","created":1564019968829,"text":"WordCloud词云"},"children":[]}]},{"data":{"id":"c1optv11w7k0","created":1585626911359,"text":"Scala"},"children":[]}]},{"data":{"id":"bvdsikpo1ww0","created":1562580380063,"text":"其他技能"},"children":[{"data":{"id":"bvdsishvwew0","created":1562580397007,"text":"电钢"},"children":[{"data":{"id":"bzst9s7k66o0","created":1578730545325,"text":"识谱"},"children":[{"data":{"id":"c0u969onv9k0","created":1582533126063,"text":"拜厄/哈农"},"children":[]}]},{"data":{"id":"bzst9x46wa00","created":1578730556005,"text":"弹奏"},"children":[]}]}]}]},"template":"right","theme":"classic","version":"1.4.43"}